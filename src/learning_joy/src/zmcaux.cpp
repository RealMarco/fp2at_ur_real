
/********************************** ZMC?????????  ************************************************
**--------------??????--------------------------------------------------------------------------------
**?????: zmcaux.c
**??????: zxy
**???: 20130621
**????: ZMCDLL ????????

????????EXCUTE??????????????????????????????????????????????????????.
  
	
	  
**------------?????????----------------------------------------------------------------------------
		
** ?????: zxy
** ??  ??: 1.1
** ?????: 2014.5.11
** ?????: ZMC_ExecuteNoAck ??I? ZMC_Execute
		  
			
** ?????: zxy
** ??  ??: 1.3
** ?????: 2014.7.21
** ?????: ZMC_Execute ZMC_DirectCommand ??I?ZAux_Execute ZAux_DirectCommand
			  
???? ZAux_SetParam  ZAux_GetParam  ZAux_Direct_SetParam  ZAux_Direct_GetParam
				
???? ZAux_WriteUFile  ZAux_ReadUFile
				  
** ?????: wy
** ??  ??: 1.5
** ?????: 2016.6.6
** ?????: ??????BASIC???????????????ZMC??AUX??


  ** ?????: wy
** ??  ??: 2.1
** ?????: 2018.8.24
** ??  ????????PCI???????
**		   ??????BASIC????????????????????????????????
**		   ??????????????
**		   ???????MOVE_PARA???
		   ????????????????
**------------------------------------------------------------------------------------------------------
********************************************************************************************************/

//#include "stdafx.h"
#include "stdio.h"
#include "string.h"
#include "time.h"
#include "stdarg.h"
#include "ctype.h"
#include "malloc.h"
#include "stdlib.h"



#include "zmotion.h"
#include "zmcaux.h"

#ifdef Z_DEBUG
#undef THIS_FILE
static const char THIS_FILE[] = "zmcaux";
#endif

int g_ZMC_MaxExcuteWaitms = 1000;
int g_ZMC_bIfDebugtoFile = false;
char g_ZMC_aDebugFileName[2048] = "zauxcmd.txt";

#if 0
//???????????
#endif

void  ZAux_TraceOut(const char * cText, ...)
{
    char ErrorText[2048];

	
    va_list valist;
    
    // Build variable text buffer
    va_start(valist, cText);
    vsprintf(ErrorText, cText, valist);
    va_end(valist);
	
	
    //OutputDebugString( ErrorText );
	
	
#ifdef ZAUX_DEBUG
	FILE * DebugFileId;
	DebugFileId = fopen(ZAUX_DEBUG_FILE,"a");
	if(NULL == DebugFileId)
	{
		::MessageBox(NULL, "Can not open file", _T("Error"), MB_OK | MB_ICONEXCLAMATION);
	}
	else
	{
		fputs(ErrorText, DebugFileId);
		fclose(DebugFileId);
	}
	
#endif    
	
}

/*************************************************************
Description:    //???????????????? ??????.
Input:          //?????COMId 
Output:         //??????phandle
Return:         //??????
*************************************************************/
int32  ZAux_OpenCom(uint32 comid, ZMC_HANDLE * phandle)
{
	int32 iresult;
	iresult = ZMC_OpenCom(comid, phandle);
	
	return iresult;
}

/*************************************************************
Description:    //?????????????????
Input:          //?????????uimincomidfind
Input:          //?????uimaxcomidfind
Input:          //???????uims
Output:         //????COM pcomid
Output:         //??????handle
Return:         //??????
*************************************************************/
int32  ZAux_SearchAndOpenCom(uint32 uimincomidfind, uint32 uimaxcomidfind,uint* pcomid, uint32 uims, ZMC_HANDLE * phandle)
{
	int32 iresult;
	iresult =ZMC_SearchAndOpenCom(uimincomidfind, uimaxcomidfind, pcomid,uims, phandle);
	
	return iresult;
}

/*************************************************************
Description:    //?????????????????????
Input:          //dwBaudRate ??????
				dwByteSize   ?????? 
				dwParity = NOPARITY,?????? 
				dwStopBits = ONESTOPBIT????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_SetComDefaultBaud(uint32 dwBaudRate, uint32 dwByteSize, uint32 dwParity, uint32 dwStopBits)
{
	int32 iresult;
	iresult = ZMC_SetComDefaultBaud(dwBaudRate,dwByteSize,dwParity,dwStopBits);
	
	return iresult;
}


/*************************************************************
Description:    //????????IP???
Input:          //??????handle 
Input:          //ipaddress IP???  
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_SetIp(ZMC_HANDLE handle, char * ipaddress)
{
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
    //????????
	sprintf(cmdbuff, "IP_ADDRESS=%s", ipaddress);
	
	//???????????????
	//return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	return  ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
}

/*************************************************************
Description:    //???????????????
Input:          //IP??????????????????
Output:         //??????handle
Return:         //??????
*************************************************************/
int32  ZAux_OpenEth(char *ipaddr, ZMC_HANDLE * phandle)
{
	int32 iresult;
	iresult = ZMC_OpenEth(ipaddr, phandle);
	
	return iresult;
}

/*************************************************************
Description:    //???????IP????
Input:          //uims ??????
Input:          //addrbufflength		????
output:			//ipaddrlist		???????IP????
Return:         //??????, ERR_OK???????????.
*************************************************************/
int32  ZAux_SearchEthlist(char *ipaddrlist, uint32 addrbufflength, uint32 uims)
{
    //???????IP???
	int32 iresult;
    iresult = ZMC_SearchEth(ipaddrlist, addrbufflength, uims);
	return iresult;
}

/*************************************************************
Description:    //?????????????
Input:          //ipaddress ??????IP???
Input:          //uims ??????
Output:         //
Return:         //??????, ERR_OK???????????.
*************************************************************/
int32  ZAux_SearchEth(const char *ipaddress,  uint32 uims)
{
    //???????IP???
    char buffer[10240];
	int32 iresult;
    
    //
    iresult = ZMC_SearchEth(buffer, 10230, uims);
    if(ERR_OK != iresult)
    {
		return 20010; //????
    }
	
    //??????????????
    int ipos =0;
    const char * pstring;
    pstring = buffer;
	
    for(int j= 0; j< 100;j++) //???100??IP????
    {
        char buffer2[256];
        buffer2[0] = '\0';
		
        //???????
        while(' ' == pstring[0])
        {
            pstring++;
        }
        
        ipos = sscanf(pstring , "%s", &buffer2);
        if(EOF  == ipos)
        {
            break;
        }
		
        //???????
        while((' ' != pstring[0]) && ('\t' != pstring[0]) && ('\0' != pstring[0]))
        {
            pstring++;
        }
        
		if(0 == strcmp(buffer2, ipaddress))
		{
			return ERR_OK;
		}
		
    }
    
	return 20010; //????
}


/*************************************************************
Description:    //????????????
Input:          //??????handle
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Close(ZMC_HANDLE  handle)
{
	int32 iresult;
	iresult = ZMC_Close(handle);
	
	return iresult;	
}

/*************************************************************
Description:    //???????????BAS???
Input:          //??????handle
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Resume(ZMC_HANDLE handle)
{
	int32 iresult;
	iresult = ZMC_Resume(handle);
	
	return iresult;	
}

/*************************************************************
Description:    //???????????BAS????
Input:          //??????handle
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Pause(ZMC_HANDLE handle)
{
	int32 iresult;
	iresult = ZMC_Pause(handle);
	
	return iresult;	
}


/*************************************************************
Description:    //????BAS???????ZAR???????????????????
Input:          //??????handle
Input:          //Filename BAS???????
Input:          //?????RAM-ROM  0-RAM  1-ROM
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_BasDown(ZMC_HANDLE handle,const char *Filename,uint32 run_mode )
{
	int32 	iresult;
    char    atemp[4096];
    char    adir[4096];
	
    iresult = ZMC_MakeOneFileZpj(atemp, adir, Filename);
    if(ERR_OK != iresult)
    {
        return iresult;
    }
    
	if (run_mode == 0)
	{
		iresult = ZMC_MakeZarAndRamRun2(handle, atemp, adir, NULL, 0);
    
	}
	else
	{
		iresult = ZMC_MakeZarAndDown2(handle, atemp, adir, NULL, 0);
	}

	if(ERR_OK != iresult)
    {
		return iresult;
    }        
	
    iresult = ZMC_Resume(handle);
    if(ERR_OK != iresult)
    {
		return iresult;
    }  
	
	return ERR_OK;
}



/*************************************************************
Description:    //??? Excute ????, ?????????
Input:          //??????			handle
Input:          //?????????		pszCommand
Input:			//????????????	uiResponseLength 
Output:         //??????????		psResponse
Return:         //??????
*************************************************************/
int32  ZAux_Execute(ZMC_HANDLE handle, const char* pszCommand, char* psResponse, uint32 uiResponseLength)
{
	int32 iresult;
	iresult = ZMC_Execute(handle, pszCommand, g_ZMC_MaxExcuteWaitms, psResponse, uiResponseLength);
	if(ERR_OK != iresult)
	{
		ZAUX_ERROR2("ZMC_Execute:%s error:%d.",  pszCommand, iresult);
	}

	//?????????????
	if(g_ZMC_bIfDebugtoFile)
	{
		FILE * DebugFileId;
		char  Backbuff[2048];
		char time_str[32];
		time_t SysTime = time(0); 
		DebugFileId = fopen(g_ZMC_aDebugFileName,"a");
		if(NULL == DebugFileId)
		{
			//::MessageBox(NULL, "Can not open file", _T("Error"), MB_OK | MB_ICONEXCLAMATION);
		}
		else
		{

			if(g_ZMC_bIfDebugtoFile == 1)		//???????
			{
				if(ERR_OK != iresult) 
				{
					strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", localtime(&SysTime));
					sprintf(Backbuff,"%s\t%s\tError:%d\r",time_str,pszCommand,iresult);
					fputs(Backbuff, DebugFileId);
				}

			}
			else if( g_ZMC_bIfDebugtoFile == 2)  //????????
			{
				//
				if(0 == uiResponseLength) 
				{
					strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", localtime(&SysTime));

					if(iresult != 0 )
					{
						sprintf(Backbuff,"%s\t%s\tError:%d\r",time_str,pszCommand,iresult);
					}
					else
					{
						sprintf(Backbuff,"%s\t%s\r",time_str,pszCommand);				
					}
					fputs(Backbuff, DebugFileId);
				}
			}
			else										
			{
				strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", localtime(&SysTime));

				if(iresult != 0 )
				{
					sprintf(Backbuff,"%s\t%s\tError:%d\r",time_str,pszCommand,iresult);

				}
				else if(0 != uiResponseLength)
				{
					sprintf(Backbuff,"%s\t%s\tRe:%s\r",time_str,pszCommand,psResponse);
				}
				else
				{
					sprintf(Backbuff,"%s\t%s\r",time_str,pszCommand);			
				}
				fputs(Backbuff, DebugFileId);
			}

			fclose(DebugFileId);
		}
	}

	return iresult;
}


/*************************************************************
Description:    //??? DirectCommand ????, ?????????
Input:          //??????			handle
Input:          //?????????		pszCommand
Input:			//????????????	uiResponseLength 
Output:         //??????????		psResponse
Return:         //??????
*************************************************************/
int32  ZAux_DirectCommand(ZMC_HANDLE handle, const char* pszCommand, char* psResponse, uint32 uiResponseLength)
{
	int32 iresult;
	iresult = ZMC_DirectCommand(handle, pszCommand, psResponse, uiResponseLength);
	if(ERR_OK != iresult)
	{
		ZAUX_ERROR2("ZMC_DirectCommand:%s error:%d.", pszCommand, iresult);
	}

	//?????????????
	if(g_ZMC_bIfDebugtoFile)
	{
		FILE * DebugFileId;
		char  Backbuff[2048];
		char time_str[32];
		time_t SysTime = time(0); 
		DebugFileId = fopen(g_ZMC_aDebugFileName,"a");
		if(NULL == DebugFileId)
		{
			//::MessageBox(NULL, "Can not open file", _T("Error"), MB_OK | MB_ICONEXCLAMATION);
		}
		else
		{

			if(g_ZMC_bIfDebugtoFile == 1)		//???????
			{
				if(ERR_OK != iresult) 
				{
					strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", localtime(&SysTime));
					sprintf(Backbuff,"%s\t%s\tError:%d\r",time_str,pszCommand,iresult);
					fputs(Backbuff, DebugFileId);
				}

			}
			else if( g_ZMC_bIfDebugtoFile == 2)  //????????
			{
				//
				if(0 == uiResponseLength) 
				{
					strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", localtime(&SysTime));

					if(iresult != 0 )
					{
						sprintf(Backbuff,"%s\t%s\tError:%d\r",time_str,pszCommand,iresult);
					}
					else
					{
						sprintf(Backbuff,"%s\t%s\r",time_str,pszCommand);				
					}
					fputs(Backbuff, DebugFileId);
				}
			}
			else										
			{
				strftime(time_str, sizeof(time_str), "%Y-%m-%d %H:%M:%S", localtime(&SysTime));

				if(iresult != 0 )
				{
					sprintf(Backbuff,"%s\t%s\tError:%d\r",time_str,pszCommand,iresult);

				}
				else if(0 != uiResponseLength)
				{
					sprintf(Backbuff,"%s\t%s\tRe:%s\r",time_str,pszCommand,psResponse);
				}
				else
				{
					sprintf(Backbuff,"%s\t%s\r",time_str,pszCommand);			
				}
				fputs(Backbuff, DebugFileId);
			}

			fclose(DebugFileId);
		}
	}
	return iresult;
}


/*************************************************************
Description:    //???????????.
Input:          //??????handle 
bifTofile		0 ???  1-????????????  2-?????????????????  3??????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_SetTraceFile(int bifTofile, const char *pFilePathName)
{
	g_ZMC_bIfDebugtoFile = bifTofile;
	strcpy(g_ZMC_aDebugFileName, pFilePathName);
	
	return ERR_OK;
}


#if 0
//****************************************************IO???**************************
// ??????? ZMC_GetIn ZMC_GetOutput ??
#endif

/*************************************************************
Description:    //??????????
Input:          //??????handle
				ionum IN???
Output:         //piValue ???????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetIn(ZMC_HANDLE handle, int ionum , uint32 *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?IN(%d)", ionum);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????????
Input:          //??????handle 
				ionum ???????
				iValue	???????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetOp(ZMC_HANDLE handle, int ionum, uint32 iValue)
{
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
    //????????
	sprintf(cmdbuff, "op(%d,%d)", ionum, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????
Input:          //??????handle  
				ionum ???????
Output:         //piValue ???????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetOp(ZMC_HANDLE handle, int ionum, uint32 *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?OP(%d)", ionum);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????????????
Input:          //??????handle 
				ionum AIN????			
Output:         //pfValue ??????????? 4???????0-4095
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetAD(ZMC_HANDLE handle, int ionum , float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?AIN(%d)", ionum);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????
Input:          //??????handle  
				ionum DA???????
				fValue ??????????4???????0-4095
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetDA(ZMC_HANDLE handle, int ionum, float fValue)
{
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
    //????????
	sprintf(cmdbuff, "AOUT(%d) = %f", ionum, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????????
Input:          //??????handle  
				ionum ????????????
Output:         //pfValue ???????????? 4???????0-4095
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetDA(ZMC_HANDLE handle, int ionum, float *pfValue)
{
	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?AOUT(%d)", ionum);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????????
Input:          //??????handle  
				 ionum ???????
				 bifInvert ????? 0/1
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetInvertIn(ZMC_HANDLE handle, int ionum, int bifInvert)
{
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
    //????????
	sprintf(cmdbuff, "INVERT_IN(%d,%d)", ionum, bifInvert);
	
	//???????????????
	return  ZAux_Execute(handle, cmdbuff, cmdbuffAck,0);
	//return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????????
Input:          //??????handle  
				ionum ???????
Output:         //piValue ?????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetInvertIn(ZMC_HANDLE handle, int ionum, int *piValue)
{
	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?INVERT_IN(%d)", ionum);
	
	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}


/*************************************************************
Description:    //????pwm???
Input:          //??????handle  
				ionum PWM????
				fValue ??? ???PWM1M ??PWM 2K
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetPwmFreq(ZMC_HANDLE handle, int ionum, float fValue)
{

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
    //????????
	sprintf(cmdbuff, "PWM_FREQ(%d) = %f", ionum, fValue);
	
	//???????????????
	//return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	return ZAux_Execute(handle, cmdbuff, cmdbuffAck,0);
}

/*************************************************************
Description:    //???pwm???
Input:          //??????handle  
				ionum PWM????
Output:         //pfValue ????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetPwmFreq(ZMC_HANDLE handle, int ionum, float *pfValue)
{
	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
   	if(NULL == pfValue)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?PWM_FREQ(%d)", ionum);
	
	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????pwm????
Input:          //??????handle  
				ionum PWM????
				fValue ????	0-1  0??????PWM??
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetPwmDuty(ZMC_HANDLE handle, int ionum, float fValue)
{
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
    //????????
	sprintf(cmdbuff, "PWM_DUTY(%d) = %f", ionum, fValue);
	
	//???????????????
	//return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	return ZAux_Execute(handle, cmdbuff, cmdbuffAck,0);
}

/*************************************************************
Description:    //???pwm????
Input:          //??????handle  
				ionum PWM????
Output:         //pfValue ?????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetPwmDuty(ZMC_HANDLE handle, int ionum, float *pfValue)
{
	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
   	if(NULL == pfValue)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?PWM_DUTY(%d)", ionum);
	
	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}



#if 0
//???modbus??????????????
#endif

/*************************************************************
Description:    //???? ?????????????
Input:          //??????handle  
				ionumfirst IN??????
				ionumend	IN???????
Output:         //pValueList ???? ???????
Return:         //??????
*************************************************************/
int32  ZAux_GetModbusIn(ZMC_HANDLE handle, int ionumfirst, int ionumend, uint8 *pValueList)
{
    if(ionumend < ionumfirst)
    {
        return ERR_AUX_PARAERR;
    }
    
    return ZMC_Modbus_Get0x(handle, 10000+ionumfirst, ionumend-ionumfirst +1, pValueList);
}

/*************************************************************
Description:    //???? ???????????????????
Input:          //??????handle  
				ionumfirst IN??????
				ionumend	IN???????
Output:         //pValueList ???? ???????
Return:         //??????
*************************************************************/
int32  ZAux_GetModbusOut(ZMC_HANDLE handle, int ionumfirst, int ionumend, uint8 *pValueList)
{
    if(ionumend < ionumfirst)
    {
        return ERR_AUX_PARAERR;
    }
    
    return ZMC_Modbus_Get0x(handle, 20000+ionumfirst, ionumend-ionumfirst +1, pValueList);
}

/*************************************************************
Description:    //???? ??????????????DPOS
Input:          //??????handle  
				imaxaxises ??????
Output:         //pValueList ?????????? ????0???
Return:         //??????
*************************************************************/
int32  ZAux_GetModbusDpos(ZMC_HANDLE handle, int imaxaxises, float *pValueList)
{
    return ZMC_Modbus_Get4x(handle, 10000, imaxaxises*2, (uint16 *)pValueList);
}

/*************************************************************
Description:    //???? ??????????????MPOS
Input:          //??????handle 
				imaxaxises ??????
Output:         //pValueList ????????????? ????0???
Return:         //??????
*************************************************************/
int32  ZAux_GetModbusMpos(ZMC_HANDLE handle, int imaxaxises, float *pValueList)
{
    return ZMC_Modbus_Get4x(handle, 11000, imaxaxises*2, (uint16 *)pValueList);
}

/*************************************************************
Description:    //???? ?????????????????
Input:          //??????handle  
				imaxaxises ??????
Output:         //pValueList ?????????? ????0???
Return:         //??????
*************************************************************/
int32  ZAux_GetModbusCurSpeed(ZMC_HANDLE handle, int imaxaxises, float *pValueList)
{
    return ZMC_Modbus_Get4x(handle, 12000, imaxaxises*2, (uint16 *)pValueList);
}

#if 0
//????ZAux_DirectCommand ?????????????, ZAux_DirectCommand???????ZMC_Execute???
// ????????????????????????????ZAux_DirectCommand
// 20130901??????????????????????????ZAux_DirectCommand?????????????????????????????????
// ZAux_DirectCommand?????????????????????????????????????????????????
#endif

#if 0
//**************************************?????????***************************************
#endif


/*************************************************************
Description:    //????????????? sParam: ????????????
Input:          //??????handle 
				sParam ????????? "DPOS" ...
				iaxis ???
				fset ???
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetParam(ZMC_HANDLE handle,const char *sParam,int iaxis, float fset)
{

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
    //????????
	sprintf(cmdbuff, "%s(%d)=%f", sParam,iaxis, fset);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???? ??????????????, sParam:????????????
Input:          //??????handle  
				sParam ????????? "DPOS" ...
				iaxis ???
Output:         //pfValue  ?????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetParam(ZMC_HANDLE handle,const char *sParam, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?%s(%d)", sParam,iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????
Input:          //??????handle  
				iaxis ???
				fValue  ???
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetAccel(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "ACCEL(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ?????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetAccel(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?ACCEL(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????
Input:          //??????handle  
				iaxis ???
Output:         //?????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetAddax(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?ADDAX_AXIS(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????????
Input:          //??????handle  
				iaxis ???
				iValue ?????????????????????-1
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetAlmIn(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "ALM_IN(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ????????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetAlmIn(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?ALM_IN(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //??????????
Input:          //??????handle 
				iaxis ???
				iValue ??????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetAtype(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "ATYPE(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????
Input:          //??????handle 
				iaxis ???
Output:         //iValue ??????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetAtype(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?ATYPE(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????
Input:          //??????handle  
				iaxis ???
Output:         //?????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetAxisStatus(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?AXISSTATUS(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????????
Input:          //??????handle  
				iaxis ???
				iValue ???????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetAxisAddress(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "AXIS_ADDRESS(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????
Input:          //??????handle  
				iaxis ??? 
Output:         //piValue ?????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetAxisAddress(ZMC_HANDLE handle, int iaxis, int *piValue)
{
	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?AXIS_ADDRESS(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????????? ??????????????????????????
Input:          //??????handle  
				iaxis ???
				iValue ?? 0-??? 1- ??
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetAxisEnable(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "AXIS_ENABLE(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????
Input:          //??????handle 
				iaxis ???
Output:         //piValue ??????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetAxisEnable(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?AXIS_ENABLE(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????????????
Input:          //??????handle 
				iaxis ???
				fValue ???????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetClutchRate(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "CLUTCH_RATE(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetClutchRate(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?CLUTCH_RATE(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????????????????????????
Input:          //??????handle  
				iaxis ???
				fValue ????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetCloseWin(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "CLOSE_WIN(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????????????????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ?????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetCloseWin(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?CLOSE_WIN(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //??????????
Input:          //??????handle 
				iaxis ???
				iValue ????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetCornerMode(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "CORNER_MODE(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ?????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetCornerMode(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?CORNER_MODE(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //??????????????
Input:          //??????handle  
				iaxis ???
				fValue?????????
Output:         //	
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetCreep(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "CREEP(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ?????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetCreep(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?CREEP(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //??????????   ??-1???????????
Input:          //??????handle 
				iaxis ???
				iValue ??????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetDatumIn(ZMC_HANDLE handle, int iaxis, int iValue)
{

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "DATUM_IN(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????
Input:          //??????handle  
				iaxis 
Output:         //piValue ??????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetDatumIn(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?DATUM_IN(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????
Input:          //??????handle
				iaxis ???
				fValue ??????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetDecel(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "DECEL(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????
Input:          //??????handle 
				iaxis ???
Output:         //pfValue ????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetDecel(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?DECEL(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????????????????????????????????
Input:          //??????handle  
				iaxis ???
				fValue ????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetDecelAngle(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "DECEL_ANGLE(%d)=%.3f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????????????????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetDecelAngle(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?DECEL_ANGLE(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //??????????
Input:          //??????handle
				iaxis ???
				fValue ??????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetDpos(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "DPOS(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ?????????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetDpos(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?DPOS(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????  ?????????????????????????
Input:          //??????handle  
				iaxis ???		
Output:         //pfValue ???????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetEncoder(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?ENCODER(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????????????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ?????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetEndMove(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?ENDMOVE(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????????????????????????????????????????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ?????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetEndMoveBuffer(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?ENDMOVE_BUFFER(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????SP???????????
Input:          //??????handle  
				iaxis ???
Output:         //fValue ????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetEndMoveSpeed(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "ENDMOVE_SPEED(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???SP???????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ?????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetEndMoveSpeed(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?ENDMOVE_SPEED(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????????????AXISSTATUS????????????????????????????WDOG??
Input:          //??????handle 
				iaxis ???
				iValue ?????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetErrormask(ZMC_HANDLE handle, int iaxis, int iValue)
{

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "ERRORMASK(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????????AXISSTATUS????????????????????????????WDOG??
Input:          //??????handle 
				iaxis ???
Output:         //piValue ????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetErrormask(ZMC_HANDLE handle, int iaxis , int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?ERRORMASK(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????JOG????
Input:          //??????handle  
				iaxis ???
				iValue ????JOG???????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetFastJog(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "FAST_JOG(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????JOG????
Input:          //??????handle  
				iaxis ???
Output:         //?????JOG???????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetFastJog(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?FAST_JOG(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????????
Input:          //??????handle  
				iaxis ???
				fValue ???????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetFastDec(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "FASTDEC(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetFastDec(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?FASTDEC(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????
Input:          //??????handle 
				iaxis ???
Output:         //pfValue ???????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetFe(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?FE(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????????????????????
Input:          //??????handle  
				iaxis ???
				fValue ????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetFeLimit(ZMC_HANDLE handle, int iaxis, float fValue)
{

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "FE_LIMIT(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????????????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ????????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetFeLimit(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?FE_LIMIT(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????????????
Input:          //??????handle  
				iaxis ???
				fValue ?????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetFRange(ZMC_HANDLE handle, int iaxis, float fValue)
{

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "FE_RANGE(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????????????
Input:          //??????handle
				iaxis ???
Output:         //pfValue ????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetFeRange(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?FE_RANGE(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}


/*************************************************************
Description:    //???????????
Input:          //??????handle  
				iaxis ???
				iValue ????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetFholdIn(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "FHOLD_IN(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????????
Input:          //??????handle 
				iaxis ???
Output:         //piValue ????????HOLDIN???????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetFholdIn(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?FHOLD_IN(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}


/*************************************************************
Description:    //???????????
Input:          //??????handle  
				iaxis ???
				fValue ?????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetFhspeed(ZMC_HANDLE handle, int iaxis, float fValue)
{
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "FHSPEED(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ???????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetFhspeed(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?FHSPEED(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????SP????????????
Input:          //??????handle  
				iaxis ???
				fValue ?????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetForceSpeed(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "FORCE_SPEED(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???SP????????????
Input:          //??????handle
				iaxis ???
Output:         //pfValue ????SP???????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetForceSpeed(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?FORCE_SPEED(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //??????????????		???????????????????
Input:          //??????handle  
				iaxis ???
				fValue ?????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetFsLimit(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "FS_LIMIT(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????????
Input:          //??????handle
				iaxis ???
Output:         //pfValue ?????????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetFsLimit(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?FS_LIMIT(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????????
Input:          //??????handle  
				iaxis ???
				fValue ???????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetFullSpRadius(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "FULL_SP_RADIUS(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ??????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetFullSpRadius(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?FULL_SP_RADIUS(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????????  ??????-1??????????????
Input:          //??????handle  
				iaxis ???
				iValue ????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetFwdIn(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "FWD_IN(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????????????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ???????????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetFwdIn(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?FWD_IN(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????????JOG????
Input:          //??????handle  
				iaxis ???
				iValue ?????JOG???????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetFwdJog(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "FWD_JOG(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????JOG????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ?????JOG???????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetFwdJog(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?FWD_JOG(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????????????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ?????????? 0-????? -1 ??
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetIfIdle(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?IDLE(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????
Input:          //??????handle  
				iaxis ???
				iValue ????????????? ????+????/?????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetInvertStep(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "INVERT_STEP(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ???????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetInvertStep(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?INVERT_STEP(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //??????G?????????????????????1???????????????????????????????????
Input:          //??????handle  
				iaxis	???
				iValue ?? 0-?????? 1-????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetInterpFactor(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "INTERP_FACTOR(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????G?????????????????????1???????????????????????????????????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ?????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetInterpFactor(ZMC_HANDLE handle, int iaxis, int *piValue)
{
	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?INTERP_FACTOR(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????JOG????
Input:          //??????handle  
				iaxis ???
Output:         //fValue ????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetJogSpeed(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "JOGSPEED(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???JOG????
Input:          //??????handle  
				iaxis	???
Output:         //pfValue ?????JOG????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetJogSpeed(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?JOGSPEED(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????????????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ???????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetLinkax(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?LINK_AXIS(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????????????????????? 
Input:          //??????handle
				iaxis ???
Output:         //piValue ???????  -1 ???????? 0-??????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetLoaded(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?LOADED(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????????????
Input:          //??????handle  
				iaxis ???
				fValue ?????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetLspeed(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "LSPEED(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetLspeed(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?LSPEED(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //??????????????
Input:          //??????handle 
				iaxis ???
				iValue ??????????? MS
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetHomeWait(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "HOMEWAIT(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ?????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetHomeWait(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?HOMEWAIT(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????????????
Input:          //??????handle  
				iaxis ???
Output:         //piValue  ?????????????? -1-??????? 0-??????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetMark(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?MARK(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????b??????
Input:          //??????handle  
				iaxis ???
Output:         //piValue  ?????????????? -1-??????? 0-??????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetMarkB(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?MARKB(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????????
Input:          //??????handle  
				iaxis ???
				iValue ???????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetMaxSpeed(ZMC_HANDLE handle, int iaxis, int iValue)
{

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "MAX_SPEED(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????????????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetMaxSpeed(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?MAX_SPEED(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //??????????G
Input:          //??????handle  
				iaxis ???
				iValue	??????G???? 0-?????????G 1-????????G
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetMerge(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "MERGE(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????G??
Input:          //??????handle  
				iaxis ???
Output:         //piValue ???????????G??????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetMerge(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?MERGE(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????????????????
Input:          //??????handle  
				iaxis ????
Output:         //piValue ?????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetMovesBuffered(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?MOVES_BUFFERED(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????????MOVE_MARK???
Input:          //??????handle  
				iaxis ???
Output:         //piValue ???MARK???
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetMoveCurmark(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?MOVE_CURMARK(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????????MOVE_MARK??? ??????????????????????MARK???+1
Input:          //??????handle  
				iaxis ???
				iValue ????MARK?
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetMovemark(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "MOVE_MARK(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //????????????
Input:          //??????handle  
				iaxis ???
				fValue ????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetMpos(ZMC_HANDLE handle, int iaxis, float fValue)
{

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "MPOS(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ?????????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetMpos(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?MPOS(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //??????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ?????????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetMspeed(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?MSPEED(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????????????????????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ???????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetMtype(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?MTYPE(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????????????????????????????????G??????????????????????????????????
Input:          //??????handle  
				iaxis  ???
Output:         //piValue ????????????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetNtype(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?NTYPE(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //??????????????
Input:          //??????handle 
				iaxis ???
				fValue ?????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetOffpos(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "OFFPOS(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ?????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetOffpos(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?OFFPOS(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //????????????????????????
Input:          //??????handle  
				iaxis ???
				fValue ??????????
Output:         // 
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetOpenWin(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "OPEN_WIN(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????????????????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ?????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetOpenWin(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?OPEN_WIN(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????????????????????(MPOS)
Input:          //??????handle 
				iaxis ???
Output:         //pfValue ?????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetRegPos(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?REG_POS(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????????????????????(MPOS)
Input:          //??????handle 
iaxis ???
Output:         //pfValue ?????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetRegPosB(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?REG_POSB(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}	

/*************************************************************
Description:    //????????????????????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ???????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetRemain(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?REMAIN(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}	

/*************************************************************
Description:    //????  ?????????, ????????????
REMAIN_BUFFER????????????AXIS????ZAux_DirectCommand?????.
Input:          //??????handle  
				iaxis ???
Output:         //piValue ??????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetRemain_LineBuffer(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?REMAIN_BUFFER(1) AXIS(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}


/*************************************************************
Description:    //????  ?????????, ??????????????????
REMAIN_BUFFER????????????AXIS????ZAux_DirectCommand?????.
Input:          //??????handle  
				iaxis ???
Output:         //piValue ???????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetRemain_Buffer(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?REMAIN_BUFFER() AXIS(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}


/*************************************************************
Description:    //???????REP_OPTION??????????????DPOS??MPOS????
Input:          //??????handle  
				iaxis ???
				fValue	??????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetRepDist(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "REP_DIST(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????REP_OPTION??????????????DPOS??MPOS????
Input:          //??????handle 
				iaxis	???
Output:         //pfValue ?????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetRepDist(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?REP_DIST(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????????????
Input:          //??????handle  
				iaxis ???
				iValue ??
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetRepOption(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "REP_OPTION(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????????
Input:          //??????handle
				iaxis ???
Output:         //piValue ???????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetRepOption(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?REP_OPTION(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //??????????????????????????????-1??????
Input:          //??????handle  
				iaxis  ???
				iValue ????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetRevIn(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "Rev_In(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????????????????????????-1??????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ???????????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetRevIn(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?REV_IN(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????JOG????????????????-1??????
Input:          //??????handle  
				iaxis ???
				iValue ????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetRevJog(ZMC_HANDLE handle, int iaxis, int iValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "REV_JOG(%d)=%d", iaxis, iValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????JOG????????????????-1??????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetRevJog(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?REV_JOG(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //??????????????????  ???????????????????????
Input:          //??????handle  
				iaxis	???
				fValue  ?????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetRsLimit(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "RS_LIMIT(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????????????
Input:          //??????handle  
				iaxis	???
Output:         //pfValue ?????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetRsLimit(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?RS_LIMIT(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???????????????units/s???????????????????G????????
Input:          //??????handle  
				iaxis ???
				fValue ?????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetSpeed(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "SPEED(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????????units/s???????????????????G????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ?????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetSpeed(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?Speed(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???? S?????????? 0-?????????
Input:          //??????handle  
				iaxis ???
				fValue S??????????MS
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetSramp(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "SRAMP(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??? S??????????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ??????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetSramp(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?SRAMP(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???? ?????????SP???????????
Input:          //??????handle 
				iaxis ???
				fValue ?????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetStartMoveSpeed(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "STARTMOVE_SPEED(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????????SP???????????
Input:          //??????handle  
				iaxis	???
Output:         //pfValue ?????SP??????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetStartMoveSpeed(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?STARTMOVE_SPEED(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //???? ???????????????? ??????
Input:          //??????handle  
				iaxis ???
				fValue ????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetStopAngle(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "STOP_ANGLE(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????????????? ??????
Input:          //??????handle  
				iaxis ???
Output:         //pfValue ????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetStopAngle(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?STOP_ANGLE(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}


/*************************************************************
Description:    //???? ????????
Input:          //??????handle  
				iaxis	???
				fValue	?????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetZsmooth(ZMC_HANDLE handle, int iaxis, float fValue)
{


	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff, "ZSMOOTH(%d)=%f", iaxis, fValue);

	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????
Input:          //??????handle  
				iaxis	???
Output:         //pfValue	??????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetZsmooth(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff, "?ZSMOOTH(%d)", iaxis);

	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	//
	if(0 == strlen(cmdbuffAck))
	{
		return ERR_NOACK;
	}

	//
	sscanf(cmdbuffAck, "%f",pfValue);

	return ERR_OK;
}

/*************************************************************
Description:    //???? ???????
Input:          //??????handle  
				iaxis ???
				fValue ?????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetUnits(ZMC_HANDLE handle, int iaxis, float fValue)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "UNITS(%d)=%f", iaxis, fValue);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????
Input:          //??????handle
				iaxis	???
Output:         //pfValue ????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetUnits(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?UNITS(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}


/*************************************************************
Description:    //???????????????????????????????????
Input:          //??????handle
				iaxis ???
Output:         //pfValue ????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetVectorBuffered(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?VECTOR_BUFFERED(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????????????
Input:          //??????handle  
				iaxis	???
Output:         //pfValue	???????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetVpSpeed(ZMC_HANDLE handle, int iaxis, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?VP_SPEED(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}


/*************************************************************
Description:    //?????????, ?????????????
Input:          //??????handle  
				pname ??????????/????????????????????DPOS(0)
Output:         //pfValue ?????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetVariablef(ZMC_HANDLE handle, const char *pname, float *pfValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?%s", pname);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%f",pfValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????, ?????????????
Input:          //??????handle  
				pname ??????????/????????????????????DPOS(0)
Output:         //piValue ?????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetVariableInt(ZMC_HANDLE handle, const char *pname, int *piValue)
{

	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?%s", pname);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}


///////////////////////  ???????????????????????????????????????????
///////////////////////  ???? 20130901 ???????????????

/*************************************************************
Description:    //BASE??????
????????????????BASE??????????????????????????BASE???????.
?????????????MOVE????????????BASE?????  
Input:          //??????handle
				imaxaxises ????????
				piAxislist	??????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Base(ZMC_HANDLE handle, int imaxaxises, int *piAxislist)
{
	int i;
	char  cmdbuffAck[2048];	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	
	//
	
	if(0 > imaxaxises || imaxaxises > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,0);
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}




/*************************************************************
Description:    //????DPOS,????????????????????SETDPOS?????????
Input:          //??????handle
				iaxis	???
				pfDpos ??????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Defpos(ZMC_HANDLE handle, int iaxis, float pfDpos)
{

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	//
	if(0 > iaxis || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
	sprintf(cmdbuff, "DEFPOS(%f) AXIS(%d)",pfDpos,iaxis);

	//???????????????
	return ZAux_Execute(handle, cmdbuff,  cmdbuffAck,2048);
	//return   ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,2048);
}

/*************************************************************
Description:    //???????????G  20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				pfDisancelist		????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Move(ZMC_HANDLE handle, int imaxaxises, int *piAxislist,float *pfDisancelist)
{
	int i;
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];	
	//
	if(0 > imaxaxises || imaxaxises > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
	
    //????????
	strcat(cmdbuff, "MOVE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%f,",pfDisancelist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%f)",pfDisancelist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????GSP???  20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				pfDisancelist		????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float *pfDisancelist)
{
	int i;
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];		
	//
	if(0 > imaxaxises || imaxaxises > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
	
    //????????
	strcat(cmdbuff, "MOVESP(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%f,",pfDisancelist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%f)",pfDisancelist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //???????????G  20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				pfDisancelist		????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveAbs(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float *pfDisancelist)
{
	int i;

	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];		
	//
	if(0 > imaxaxises || imaxaxises > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
	
    //????????
	strcat(cmdbuff, "MOVEABS(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%f,",pfDisancelist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%f)",pfDisancelist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????????GSP???  20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				pfDisancelist		????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveAbsSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float *pfDisancelist)
{
	int i;

	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];		
	if(0 > imaxaxises || imaxaxises > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
		
    //????????
	strcat(cmdbuff, "MOVEABSSP(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%f,",pfDisancelist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%f)",pfDisancelist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
//Description:    //???????????????  20130901 ???????????????
//Input:          //??????handle
					??? iaxis
					??????? pfDisance
//Output:         //
//Return:         //??????
/*************************************************************/
int32  ZAux_Direct_MoveModify(ZMC_HANDLE handle, int iaxis, float pfDisance)
{

	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];		
	if(0 > iaxis || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

    //????????
	
	sprintf(cmdbuff, "MOVEMODIFY(%f) AXIS(%d)",pfDisance,iaxis);

	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????????G???  20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				end1              ??????????????
				end2              ??????????????
				centre1    ????????????????????????
				centre2    ????????????????????????
				direction  0-?????1-????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveCirc(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection)
{
	int i;
	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];	
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
		
    //????????
	sprintf(tempbuff, "MOVECIRC(%f,%f,%f,%f,%d)", fend1,fend2,fcenter1,fcenter2,idirection);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????? ??GSP???  20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				end1              ??????????????
				end2              ??????????????
				centre1    ????????????????????????
				centre2    ????????????????????????
				direction  0-?????1-????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveCircSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection)
{

	int i;
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
			
    //????????
	sprintf(tempbuff, "MOVECIRCSP(%f,%f,%f,%f,%d)", fend1,fend2,fcenter1,fcenter2,idirection);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //????????????G???  20130901 ???????????????  ????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				end1              ??????????????????????
				end2              ??????????????????????
				centre1    ??????????????????????
				centre2    ??????????????????????
				direction  0-?????1-????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveCircAbs(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection)
{

	int i;
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
	
    //????????
	sprintf(tempbuff, "MOVECIRCABS(%f,%f,%f,%f,%d)", fend1,fend2,fcenter1,fcenter2,idirection);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????????GSP???  20130901 ???????????????  ????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				end1              ??????????????????????
				end2              ??????????????????????
				centre1    ??????????????????????
				centre2    ??????????????????????
				direction  0-?????1-????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveCircAbsSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection)
{
	int i;
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
	
    //????????
	sprintf(tempbuff, "MOVECIRCABSSP(%f,%f,%f,%f,%d)", fend1,fend2,fcenter1,fcenter2,idirection);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}



/*************************************************************
Description:    //???3???????G???  20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				mid1       ???????????????????????
				mid2       ???????????????????????
				end1              ???????????????????????
				end2              ???????????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveCirc2(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fmid1, float fmid2, float fend1, float fend2)
{

	int i ;
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
		
    //????????
	sprintf(tempbuff, "MOVECIRC2(%f,%f,%f,%f)", fmid1,fmid2,fend1,fend2);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //????3???????G???  20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				mid1       ????????????????????
				mid2       ????????????????????
				end1              ????????????????????
				end2              ???????????????????? 
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveCirc2Abs(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fmid1, float fmid2, float fend1, float fend2)
{

	int i;
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
			
    //????????
	sprintf(tempbuff, "MOVECIRC2ABS(%f,%f,%f,%f)", fmid1,fmid2,fend1,fend2);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???3???????GSP???  20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				mid1       ???????????????????????
				mid2       ???????????????????????
				end1              ???????????????????????
				end2              ???????????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveCirc2Sp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fmid1, float fmid2, float fend1, float fend2)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
				
    //????????
	sprintf(tempbuff, "MOVECIRC2SP(%f,%f,%f,%f)", fmid1,fmid2,fend1,fend2);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //????3???????GSP???  20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				mid1       ????????????????????
				mid2       ????????????????????
				end1              ????????????????????
				end2              ???????????????????? 
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveCirc2AbsSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fmid1, float fmid2, float fend1, float fend2)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
			
    //????????
	sprintf(tempbuff, "MOVECIRC2ABSSP(%f,%f,%f,%f)", fmid1,fmid2,fend1,fend2);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}



/*************************************************************
Description:    //???3???????????G???  20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				end1              ??????????????
				end2              ??????????????
				centre1    ????????????????????????
				centre2    ????????????????????????		
				direction  0-?????1-????
				distance3???????????????
				mode      ?????????????:0(??)???????????????1????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MHelical(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection, float fDistance3, int imode)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
				
    //????????
	sprintf(tempbuff, "MHELICAL(%f,%f,%f,%f,%d,%f,%d)", fend1,fend2,fcenter1,fcenter2,idirection, fDistance3, imode);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????3???????????G??? 20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				end1              ??????????????
				end2              ??????????????
				centre1    ?????????????????
				centre2    ?????????????????
				direction  0-?????1-????
				distance3???????????????
				mode      ?????????????:0(??) ???????????????1????????????????
Output:         //
 Return:         //??????
*************************************************************/
int32  ZAux_Direct_MHelicalAbs(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection, float fDistance3, int imode)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
		
    //????????
	sprintf(tempbuff, "MHELICALABS(%f,%f,%f,%f,%d,%f,%d)", fend1,fend2,fcenter1,fcenter2,idirection, fDistance3, imode);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	//return ZMC_ExecuteNoAck(handle, cmdbuff, g_ZMC_MaxExcuteWaitms);
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???3???????????GSP???  20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				end1              ??????????????
				end2              ??????????????
				centre1    ????????????????????????	  
				centre2    ????????????????????????		
				direction  0-?????1-????  
				distance3???????????????
			  mode      ?????????????: 0(??)??????????????? 1????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MHelicalSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection, float fDistance3, int imode)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
			
    //????????
	sprintf(tempbuff, "MHELICALSP(%f,%f,%f,%f,%d,%f,%d)", fend1,fend2,fcenter1,fcenter2,idirection, fDistance3, imode);
    strcat(cmdbuff, tempbuff);	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????3???????????GSP??? 20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				end1              ??????????????
				end2              ??????????????
				centre1    ?????????????????
				centre2    ?????????????????
				direction  0-?????1-????
				distance3???????????????
				mode      ?????????????:0(??) ???????????????1????????????????
Output:         //
 Return:         //??????
*************************************************************/
int32  ZAux_Direct_MHelicalAbsSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection, float fDistance3, int imode)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
				
    //????????
	sprintf(tempbuff, "MHELICALABSSP(%f,%f,%f,%f,%d,%f,%d)", fend1,fend2,fcenter1,fcenter2,idirection, fDistance3, imode);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //???3?? 3????????G???  20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				mid1       ????????????  
				mid2       ????????????	
				end1              ????????????	  
				end2              ????????????		
				distance3???????????????		  
				mode      ?????????????:			
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MHelical2(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fmid1, float fmid2, float fend1, float fend2, float fDistance3, int imode)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
					
    //????????
	sprintf(tempbuff, "MHELICAL2(%f,%f,%f,%f,%f,%d)", fmid1,fmid2,fend1,fend2, fDistance3, imode);
    strcat(cmdbuff, tempbuff);	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????3?? 3????????G???  20130901 ???????????????
Input:          //??????handle
			imaxaxises			?????????????
			piAxislist			???????
			mid1       ????????????
			mid2       ????????????
			end1              ????????????
			end2              ????????????
			distance3   ?????????????????
			mode      ?????????????:
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MHelical2Abs(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fmid1, float fmid2, float fend1, float fend2, float fDistance3, int imode)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
				
    //????????
	sprintf(tempbuff, "MHELICAL2ABS(%f,%f,%f,%f,%f,%d)", fmid1,fmid2,fend1,fend2, fDistance3, imode);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???3?? 3????????GSP???  20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				mid1       ????????????  
				mid2       ????????????	
				end1              ????????????	  
				end2              ????????????		
				distance3???????????????		  
				mode      ?????????????:			
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MHelical2Sp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fmid1, float fmid2, float fend1, float fend2, float fDistance3, int imode)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
					
    //????????
	sprintf(tempbuff, "MHELICAL2SP(%f,%f,%f,%f,%f,%d)", fmid1,fmid2,fend1,fend2, fDistance3, imode);
    strcat(cmdbuff, tempbuff);	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????3?? 3????????GSP???  20130901 ???????????????
Input:          //??????handle
			imaxaxises			?????????????
			piAxislist			???????
			mid1       ????????????
			mid2       ????????????
			end1              ????????????
			end2              ????????????
			distance3   ?????????????????
			mode      ?????????????:
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MHelical2AbsSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fmid1, float fmid2, float fend1, float fend2, float fDistance3, int imode)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
						
    //????????
	sprintf(tempbuff, "MHELICAL2ABSSP(%f,%f,%f,%f,%f,%d)", fmid1,fmid2,fend1,fend2, fDistance3, imode);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}



/*************************************************************
Description:    //????????G 20130901 ???????????????
Input:          //??????handle
			imaxaxises			?????????????
			piAxislist			???????
			fend1              ??????????????????????????
			fend2              ??????????????????????????
			fcenter1    ???????????????????????????
			fcenter2    ???????????????????????????
			idirection  0-?????1-????
			fADis         ????????????????????????????
			fBDis        ???????????????????????????AB???????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MEclipse(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection, float fADis, float fBDis)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
						
    //????????
	sprintf(tempbuff, "MECLIPSE(%f,%f,%f,%f,%d,%f,%f,%f)", fend1,fend2,fcenter1,fcenter2,idirection, fADis, fBDis);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????G 20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				fend1              ????????????????
				fend2              ????????????????
				fcenter1    ?????????????????
				fcenter2    ?????????????????
				idirection  0-?????1-????
				fADis         ????????????????????????????
				fBDis        ???????????????????????????AB???????????????????

  Output:         //
  Return:         //??????
*************************************************************/
int32  ZAux_Direct_MEclipseAbs(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection, float fADis, float fBDis)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
				
    //????????
	sprintf(tempbuff, "MECLIPSEABS(%f,%f,%f,%f,%d,%f,%f)", fend1,fend2,fcenter1,fcenter2,idirection, fADis, fBDis);
    strcat(cmdbuff, tempbuff);	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //????????GSP??? 20130901 ???????????????
Input:          //??????handle
			imaxaxises			?????????????
			piAxislist			???????
			fend1              ??????????????????????????
			fend2              ??????????????????????????
			fcenter1    ???????????????????????????
			fcenter2    ???????????????????????????
			idirection  0-?????1-????
			fADis         ????????????????????????????
			fBDis        ???????????????????????????AB???????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MEclipseSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection, float fADis, float fBDis)
{
	int i;
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
					
    //????????
	sprintf(tempbuff, "MECLIPSESP(%f,%f,%f,%f,%d,%f,%f)", fend1,fend2,fcenter1,fcenter2,idirection, fADis, fBDis);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????GSP??? 20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				fend1              ????????????????
				fend2              ????????????????
				fcenter1    ?????????????????
				fcenter2    ?????????????????
				idirection  0-?????1-????
				fADis         ????????????????????????????
				fBDis        ???????????????????????????AB???????????????????

  Output:         //
  Return:         //??????
*************************************************************/
int32  ZAux_Direct_MEclipseAbsSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection, float fADis, float fBDis)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
						
    //????????
	sprintf(tempbuff, "MECLIPSEABSSP(%f,%f,%f,%f,%d,%f,%f)", fend1,fend2,fcenter1,fcenter2,idirection, fADis, fBDis);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //??? ??? + ??????G??? 20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				fend1              ??????????????????????????
				fend2              ??????????????????????????
				fcenter1    ???????????????????????????
				fcenter2    ???????????????????????????
				idirection  0-?????1-????
				fADis         ????????????????????????????
				fBDis        ???????????????????????????AB???????????????????
				fDistance3	????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MEclipseHelical(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection, float fADis, float fBDis, float fDistance3)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
						
    //????????
	sprintf(tempbuff, "MECLIPSE(%f,%f,%f,%f,%d,%f,%f,%f)", fend1,fend2,fcenter1,fcenter2,idirection, fADis, fBDis, fDistance3);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????? + ??????G??? 20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				fend1              ????????????????
				fend2              ????????????????
				fcenter1    ?????????????????
				fcenter2    ?????????????????
				idirection  0-?????1-????
				fADis         ????????????????????????????
				fBDis        ???????????????????????????AB???????????????????
				fDistance3	????????????????
  Output:         //
  Return:         //??????
*************************************************************/
int32  ZAux_Direct_MEclipseHelicalAbs(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection, float fADis, float fBDis,float fDistance3)
{
	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
	//????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
				
    //????????
	sprintf(tempbuff, "MECLIPSEABS(%f,%f,%f,%f,%d,%f,%f,%f)", fend1,fend2,fcenter1,fcenter2,idirection, fADis, fBDis,fDistance3);
    strcat(cmdbuff, tempbuff);	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??? ??? + ??????GSP??? 20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				fend1              ??????????????????????????
				fend2              ??????????????????????????
				fcenter1    ???????????????????????????
				fcenter2    ???????????????????????????
				idirection  0-?????1-????
				fADis         ????????????????????????????
				fBDis        ???????????????????????????AB???????????????????
				fDistance3	????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MEclipseHelicalSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection, float fADis, float fBDis, float fDistance3)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
				
    //????????
	sprintf(tempbuff, "MECLIPSESP(%f,%f,%f,%f,%d,%f,%f,%f)", fend1,fend2,fcenter1,fcenter2,idirection, fADis, fBDis, fDistance3);
    strcat(cmdbuff, tempbuff);	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????? + ??????GSP??? 20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				fend1              ????????????????
				fend2              ????????????????
				fcenter1    ?????????????????
				fcenter2    ?????????????????
				idirection  0-?????1-????
				fADis         ????????????????????????????
				fBDis        ???????????????????????????AB???????????????????
				fDistance3	????????????????
  Output:         //
  Return:         //??????
*************************************************************/
int32  ZAux_Direct_MEclipseHelicalAbsSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fcenter1, float fcenter2, int idirection, float fADis, float fBDis,float fDistance3)
{
	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
				
    //????????
	sprintf(tempbuff, "MECLIPSEABSSP(%f,%f,%f,%f,%d,%f,%f,%f)", fend1,fend2,fcenter1,fcenter2,idirection, fADis, fBDis,fDistance3);
    strcat(cmdbuff, tempbuff);	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //?????? + ??????G??? 20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				end1              ??1??????????????1	????????
				end2              ??2??????????????1	????????  
				end3              ??3??????????????1	????????
				centre1    ??1??????????????2	????????
				centre2    ??2??????????????2	????????
				centre3    ??3??????????????2 ????????
				mode      ???????????????
					0 ?????????????????????????????1??????????????2?????????
					1 ????????????????????1??????????????2????????
					2 ???????????????????????????1??????????????2?????????
					3 ????????????????????????????????????1??????????????2????????
				fcenter4	??4?????????????? 
				fcenter5	??5??????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MSpherical(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fend3, float fcenter1, float fcenter2, float fcenter3, int imode, float fcenter4, float fcenter5)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
				
    //????????
	sprintf(tempbuff, "MSPHERICAL(%f,%f,%f,%f,%f,%f,%d,%f,%f)", fend1,fend2,fend3,fcenter1,fcenter2,fcenter3,imode,fcenter4,fcenter5);
    strcat(cmdbuff, tempbuff);	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //?????? + ???? ??GSP??? 20130901 ???????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				end1              ??1??????????????1	????????
				end2              ??2??????????????1	????????  
				end3              ??3??????????????1	????????
				centre1    ??1??????????????2	????????
				centre2    ??2??????????????2	????????
				centre3    ??3??????????????2 ????????
				mode      ???????????????
					0 ?????????????????????????????1??????????????2?????????
					1 ????????????????????1??????????????2????????
					2 ???????????????????????????1??????????????2?????????
					3 ????????????????????????????????????1??????????????2????????
				fcenter4	??4?????????????? 
				fcenter5	??5??????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MSphericalSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float fend1, float fend2, float fend3, float fcenter1, float fcenter2, float fcenter3, int imode, float fcenter4, float fcenter5)
{
	int i;
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
				
    //????????
	sprintf(tempbuff, "MSPHERICALSP(%f,%f,%f,%f,%f,%f,%d,%f,%f)", fend1,fend2,fend3,fcenter1,fcenter2,fcenter3,imode, fcenter4, fcenter5);
    strcat(cmdbuff, tempbuff);	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????????G???????????????????????0?????????0?????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				centre1: ??1????????????
				centre2: ??2????????????
				circles:  ??????????????????????????????????.
				pitch:   ????????????????????
				distance3        ??3?????????????????3???????????????????????
				distance4        ??4?????????????????4???????????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveSpiral(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float centre1, float centre2, float circles, float pitch, float distance3, float distance4)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
				
    //????????
	sprintf(tempbuff, "MOVESPIRAL(%f,%f,%f,%f,%f,%f)", centre1,centre2,circles,pitch,distance3,distance4);
    strcat(cmdbuff, tempbuff);	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //???????????GSP???????????????????????0?????????0?????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				centre1: ??1????????????
				centre2: ??2????????????
				circles:  ??????????????????????????????????.
				pitch:   ????????????????????
				distance3        ??3?????????????????3???????????????????????
				distance4        ??4?????????????????4???????????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveSpiralSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float centre1, float centre2, float circles, float pitch, float distance3, float distance4)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
					
    //????????
	sprintf(tempbuff, "MOVESPIRALSP(%f,%f,%f,%f,%f,%f)", centre1,centre2,circles,pitch,distance3,distance4);
    strcat(cmdbuff, tempbuff);	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????G???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				end1              ??1???????????????
				end2              ??2???????????????
				end3              ??3???????????????
				next1      ??1???????????????????????
				next2      ??2???????????????????????
				next3      ??3???????????????????????
				radius      ???????????????????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveSmooth(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float end1, float end2, float end3, float next1, float next2, float next3, float radius)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
					
    //????????
	sprintf(tempbuff, "MOVESMOOTH(%f,%f,%f,%f,%f,%f,%f)", end1,end2,end3,next1,next2,next3,radius);
    strcat(cmdbuff, tempbuff);	
	//???????????????
	return ZAux_Execute(handle, cmdbuff, cmdbuffAck, 2048);
	//return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????GSP???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
Input:          //??????handle
				imaxaxises			?????????????
				piAxislist			???????
				end1              ??1???????????????
				end2              ??2???????????????
				end3              ??3???????????????
				next1      ??1???????????????????????
				next2      ??2???????????????????????
				next3      ??3???????????????????????
				radius      ???????????????????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveSmoothSp(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, float end1, float end2, float end3, float next1, float next2, float next3, float radius)
{

	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
					
    //????????
	sprintf(tempbuff, "MOVESMOOTHSP(%f,%f,%f,%f,%f,%f,%f)", end1,end2,end3,next1,next2,next3,radius);
    strcat(cmdbuff, tempbuff);	
	//???????????????
	return ZAux_Execute(handle, cmdbuff, cmdbuffAck, 2048);
	//return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????		????G????????????????????????
Input:          //??????handle  
				??? iaxis
				?? imode	0?????? ??????????? 
							1 ???????????????????????????????????? 
							2 ?????????????????????????????????????????????MARK????????????????????????????????????????????????????????????????????????? 
  
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MovePause(ZMC_HANDLE handle,int iaxis, int imode)
{

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	sprintf(cmdbuff, "MOVE_PAUSE(%d) axis(%d)", imode,iaxis);
	
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????
Input:          //??????handle  
					??? iaxis
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveResume(ZMC_HANDLE handle,int iaxis)
{
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	sprintf(cmdbuff, "MOVE_RESUME AXIS(%d)",iaxis);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????????????????????????????????????
Input:          //??????handle  
				 ??? iaxis
Output:         //
 Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveLimit(ZMC_HANDLE handle, int iaxis,float limitspeed)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	sprintf(cmdbuff, "MOVELIMIT(%f) AXIS(%d)", limitspeed,iaxis);
	
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //?????????????????????
Input:          //??????handle  
				??? iaxis
				??????? ioutnum
				???????	ivalue
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveOp(ZMC_HANDLE handle, int iaxis,int ioutnum, int ivalue)
{

	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
   //????????
	sprintf(cmdbuff, "BASE(%d)\r\n",iaxis);
				
    //????????
	sprintf(tempbuff, "MOVE_OP(%d,%d)", ioutnum, ivalue);
    strcat(cmdbuff, tempbuff);
		
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????????????????????????
Input:          //??????handle  
				??? iaxis
				??????????? ioutnumfirst
				??????????? ioutnumend
				????????????????????	ivalue
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveOpMulti(ZMC_HANDLE handle, int iaxis, int ioutnumfirst, int ioutnumend, int ivalue)
{

	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	sprintf(cmdbuff, "BASE(%d)\r\n",iaxis);
		
    //????????
	sprintf(tempbuff, "MOVE_OP(%d,%d,%d)", ioutnumfirst, ioutnumend, ivalue);
    strcat(cmdbuff, tempbuff);	
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //????????????????????? ,???????????????
Input:          //??????handle  
				??? iaxis
				??????? ioutnum
				???????	ivalue
				???????? iofftimems
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveOp2(ZMC_HANDLE handle, int iaxis, int ioutnum, int ivalue, int iofftimems)
{

	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	sprintf(cmdbuff, "BASE(%d)\r\n",iaxis);
			
    //????????
	sprintf(tempbuff, "MOVE_OP2(%d,%d,%d)", ioutnum, ivalue, iofftimems);
    strcat(cmdbuff, tempbuff);		
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????????????AOUT??????
Input:          //??????handle  
				??? iaxis
				DA???? ioutnum
				?????? fvalue ??4??????? 12??0-4095??
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveAout(ZMC_HANDLE handle, int iaxis, int ioutnum, float fvalue)
{

	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	sprintf(cmdbuff, "BASE(%d)\r\n",iaxis);
				
    //????????
	sprintf(tempbuff, "MOVE_AOUT(%d,%f)", ioutnum, fvalue);
    strcat(cmdbuff, tempbuff);			
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????????????????
Input:          //??????handle  
				??? iaxis
				?????? itimems ????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveDelay(ZMC_HANDLE handle, int iaxis, int itimems)
{

	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	sprintf(cmdbuff, "BASE(%d)\r\n",iaxis);
				
    //????????
	sprintf(tempbuff, "MOVE_WA(%d)", itimems);
    strcat(cmdbuff, tempbuff);		
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????G?????  20130901 ???????????????
Input:          //??????handle
				tablenum			?????????????table??? 
				imaxaxises			?????????????
				piAxislist			???????
				pfDisancelist		????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveTurnabs(ZMC_HANDLE handle, int tablenum ,int imaxaxises,int *piAxislist, float *pfDisancelist)
{
	int i;
	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];	
	//
	if(0 > imaxaxises || imaxaxises > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
	
	sprintf(tempbuff, "MOVE_TURNABS(%d,",tablenum);
	strcat(cmdbuff, tempbuff);
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%f,",pfDisancelist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%f)",pfDisancelist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	//return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	return ZAux_Execute(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //???????+??????G?????  20130901 ???????????????
Input:          //??????handle
				tablenum       ????????????table???
				refpos1    ????????????????????
				refpos2    ????????????????????
				mode      1-????????????????2-?????????????????3-???????????????????????????
				end1              ????????????????????
				end2              ????????????????????
				imaxaxises        ?????????????
				piAxislist		  ??????
				pfDisancelist	?????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_McircTurnabs(ZMC_HANDLE handle, int tablenum ,float refpos1,float refpos2,int mode,float end1,float end2,int imaxaxises,int *piAxislist ,float *pfDisancelist)
{
	int i;
	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];	
	//
	if(0 > imaxaxises || imaxaxises > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
  //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
		
    //????????
	sprintf(tempbuff, "MCIRC_TURNABS(%d,%f,%f,%d,%f,%f,",tablenum,refpos1,refpos2,mode,end1,end2);
	strcat(cmdbuff, tempbuff);
	
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%f,",pfDisancelist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%f)",pfDisancelist[imaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	//return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	return ZAux_Execute(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????? ??????
Input:          //??????handle  
				iaxis			???
				istartpoint		?????TABLE???
				iendpoint		??????TABLE???
				ftablemulti		???????????????????????
				fDistance		????????????????????????????
 Output:         //
 Return:         //??????
*************************************************************/
int32  ZAux_Direct_Cam(ZMC_HANDLE handle,int iaxis, int istartpoint, int iendpoint, float ftablemulti, float fDistance)
{
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];	
    //????????
	sprintf(cmdbuff, "CAM(%d,%d,%f,%f) AXIS(%d)", istartpoint,iendpoint,ftablemulti,fDistance,iaxis);

	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????? ??????
Input:          //??????handle  
				iaxis			???
				istartpoint		?????TABLE???
				iendpoint		??????TABLE???
				ftablemulti		???????????????????????
				fDistance		????????????
				ilinkaxis		????????
				ioption			?????????????
				flinkstartpos	ioption?????????????
 Output:         //
 Return:         //??????
*************************************************************/
int32  ZAux_Direct_Cambox(ZMC_HANDLE handle, int iaxis,int istartpoint, int iendpoint, float ftablemulti, float fDistance, int ilinkaxis, int ioption, float flinkstartpos)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];	
    //????????
	sprintf(cmdbuff, "CAMBOX(%d,%d,%f,%f,%d,%d,%f) AXIS(%d)", istartpoint,iendpoint,ftablemulti,fDistance, ilinkaxis, ioption, flinkstartpos,iaxis);
	
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //??????? ??????
Input:          //??????handle  
				iaxis			????????????(??????)
				fDistance		???????????????????
				fLinkDis		????????????(????)??????????
				fLinkAcc		??????????????????????????????
				fLinkDec		??????????????????????????????
				iLinkaxis		??????????
				ioption			?????????
				flinkstartpos	??????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Movelink(ZMC_HANDLE handle, int iaxis,float fDistance, float fLinkDis, float fLinkAcc, float fLinkDec,int iLinkaxis, int ioption, float flinkstartpos)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];	
    //????????
	sprintf(cmdbuff, "MOVELINK(%f,%f,%f,%f,%d,%d,%f) AXIS(%d)", fDistance, fLinkDis, fLinkAcc,fLinkDec,iLinkaxis,ioption,flinkstartpos,iaxis);
	
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????? ??????
Input:          //??????handle  
				iaxis			????????????(??????)
				fDistance		???????????????????
				fLinkDis		????????????(????)??????????
				startsp			??????????????????????????units/units????????????????????????
				endsp			??????????????????????????units/units????, ????????????????????
				iLinkaxis		??????????
				ioption			?????????
				flinkstartpos	??????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Moveslink(ZMC_HANDLE handle, int iaxis,float fDistance, float fLinkDis, float startsp, float endsp,int iLinkaxis, int ioption, float flinkstartpos)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];	
    //????????
	sprintf(cmdbuff, "MOVESLINK(%f,%f,%f,%f,%d,%d,%f) AXIS(%d)", fDistance, fLinkDis, startsp,endsp,iLinkaxis,ioption,flinkstartpos,iaxis);
	
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???? ????????? ???????
Input:          //??????handle  
				ratio		?????????????????????????????????	
				link_axis	?????????????????????????
				move_axis	??????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Connect(ZMC_HANDLE handle, float ratio, int link_axis,int move_axis)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];	
    //????????
	sprintf(cmdbuff, "CONNECT(%f,%d) AXIS(%d)", ratio, link_axis,move_axis);
	
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???? ????????? ??????? ?????????????????link_axis????G?????????????????????
Input:          //??????handle  
				ratio		?????????????????????????????????	
				link_axis	?????????????????????????
				move_axis	??????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Connpath(ZMC_HANDLE handle, float ratio, int link_axis,int move_axis)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];	
    //????????
	sprintf(cmdbuff, "CONNPATH(%f,%d) AXIS(%d)", ratio, link_axis,move_axis);
	
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????????
Input:          //??????handle  
				iaxis	???
				imode	??????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Regist(ZMC_HANDLE handle,int iaxis, int imode)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];	
    //????????
	sprintf(cmdbuff, "REGIST(%d) AXIS(%d)", imode,iaxis);
	
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //?????????????????(1,1)
Input:          //??????handle  
				iaxis		???
				mpos_count	????????????65535
				input_count	 ????????????65535
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_EncoderRatio(ZMC_HANDLE handle, int iaxis,int mpos_count,int input_count)
{

	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	sprintf(cmdbuff, "BASE(%d)\r\n",iaxis);
					
    //????????
	sprintf(tempbuff, "ENCODER_RATIO(%d,%d)", mpos_count,input_count);
    strcat(cmdbuff, tempbuff);	
	
	//???????????????
	//return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	return ZAux_Execute(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //???????????????????(1,1)
Input:          //??????handle  
				iaxis		???
				mpos_count	?????1-65535
				input_count	 ?????1-65535
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_StepRatio(ZMC_HANDLE handle, int iaxis, int mpos_count,int input_count)
{

	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	sprintf(cmdbuff, "BASE(%d)\r\n",iaxis);	
    //????????
	sprintf(tempbuff, "STEP_RATIO(%d,%d)", mpos_count,input_count);
    strcat(cmdbuff, tempbuff);		
	
	//???????????????
	//return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	return ZAux_Execute(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //????????????
Input:          //??????handle 
				imode ????
				0???????????????
				1	???????????
				2	???????????????????
				3	????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Rapidstop(ZMC_HANDLE handle, int imode)
{

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];	
    //????????
	sprintf(cmdbuff, "RAPIDSTOP(%d)", imode);
	
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????
Input:          //??????handle  ???? ????
				imaxaxises		????
				piAxislist		??????
				imode	??
					0???????????????
					1	???????????
					2	???????????????????
					3	????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_CancelAxisList(ZMC_HANDLE handle, int imaxaxises, int *piAxislist, int imode)
{
	int i = 0;
	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];	
	if(0 > imaxaxises || imaxaxises > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
	sprintf(cmdbuff, "CANCEL(%d) AXIS(%d)\n", imode, piAxislist[i]);

	for(i = 1; i< imaxaxises; i++)
	{
		//
		sprintf(tempbuff, "CANCEL(%d) AXIS(%d)\n", imode, piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}

	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //CONNFRAME????????????	2???????????????
Input:          //??????handle
				Jogmaxaxises	?????????
				JogAxislist		?????????
				frame			??????????
				tablenum		?????????TABLE??????
				Virmaxaxises	?????????????
				VirAxislist		??????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Connframe(ZMC_HANDLE handle,int Jogmaxaxises,int *JogAxislist, int frame, int tablenum , int Virmaxaxises , int *VirAxislist)
{
	int i;
	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];	
	//
	if(0 > Jogmaxaxises || Jogmaxaxises > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	if(0 > Virmaxaxises || Virmaxaxises > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
    //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< Jogmaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",JogAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",JogAxislist[Jogmaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
	
    //????????

	sprintf(tempbuff, "CONNFRAME(%d,%d,",frame,tablenum);
	strcat(cmdbuff, tempbuff);
	
	for(i = 0; i< Virmaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",VirAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",VirAxislist[Virmaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //CONNREFRAME?????????????	2???????????????
Input:          //??????handle
				Virmaxaxises	?????????????
				VirAxislist		??????????
				frame			??????????
				tablenum		?????????TABLE??????
				Jogmaxaxises	?????????
				JogAxislist		?????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Connreframe(ZMC_HANDLE handle,int Virmaxaxises , int *VirAxislist, int frame, int tablenum , int Jogmaxaxises,int *JogAxislist)
{
	int i;
	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];	
	//
	//
	if(0 > Jogmaxaxises || Jogmaxaxises > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	if(0 > Virmaxaxises || Virmaxaxises > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
   //????????
	strcpy(cmdbuff, "BASE(");
	
	for(i = 0; i< Virmaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",VirAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",VirAxislist[Virmaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//????
	strcat(cmdbuff, "\n");
		

    //????????
	
	sprintf(tempbuff, "CONNREFRAME(%d,%d,",frame,tablenum);
	strcat(cmdbuff, tempbuff);
	
	for(i = 0; i< Jogmaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",JogAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	
	//
	sprintf(tempbuff, "%d)",JogAxislist[Jogmaxaxises-1]);
    strcat(cmdbuff, tempbuff);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}



/*********************************???????****************************************************

/*************************************************************
Description:    //????????	iaddaxis????????iaxis?? ??ADDAX????????????????
Input:          //??????handle  
				 iaxis		????????
				 iaddaxis	??????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Single_Addax(ZMC_HANDLE handle, int iaxis, int iaddaxis)
{
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(0 > iaxis || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "ADDAX(%d) AXIS(%d)", iaddaxis, iaxis);
	
	
	//???????????????
	return ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	//return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,2048);
}


/*************************************************************
Description:    //?????????
Input:          //??????handle  
				iaxis ???
				imode ??
					0???????????????
					1	???????????
					2	???????????????????
					3	????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Single_Cancel(ZMC_HANDLE handle, int iaxis, int imode)
{
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(0 > iaxis || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "CANCEL(%d) AXIS(%d)", imode, iaxis);
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //???????????
Input:          //??????handle  
				iaxis ???
				idir ???? 1???? -1????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Single_Vmove(ZMC_HANDLE handle, int iaxis, int idir)
{
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(0 > iaxis || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "VMOVE(%d) AXIS(%d)", idir, iaxis);
	
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,2048);
}

/*************************************************************
Description:    //?????????????
Input:          //??????handle  
				iaxis	???
				imode	??
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Single_Datum(ZMC_HANDLE handle, int iaxis, int imode)
{
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(0 > iaxis || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "AXIS_STOPREASON(%d) = 0\r\nDATUM(%d) AXIS(%d)",iaxis,imode,iaxis);	
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,2048);
}

/*************************************************************
Description:    //?????????
Input:          //??????handle  
				iaxis ???
Output:         //homestatus ????????? 0-?????? 1??????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetHomeStatus(ZMC_HANDLE handle,uint32 iaxis,uint32 * homestatus)
{

	int32 iresult;
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];	

	if(NULL == homestatus || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	sprintf(cmdbuff, "?IDLE(%d),AXIS_STOPREASON(%d)",iaxis,iaxis,iaxis);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,2048);
	if(0 == strlen(cmdbuffAck))
	{
		return ERR_NOACK;
	}
	int temparray[4];
	iresult = ZAux_TransStringtoInt(cmdbuffAck,2,&temparray[0]);
	int idlestatus = temparray[0];
	int stopstatus = temparray[1];

	
	if((idlestatus == -1)  && stopstatus == 0)		//????
	{
		*homestatus = 1;	//???????	
	}
	else
	{
		*homestatus = 0;	//?????????
	}
	return ERR_OK;
}

/*************************************************************
Description:    //??????????
Input:          //??????handle  
				iaxis ???
				fdistance ????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Single_Move(ZMC_HANDLE handle, int iaxis, float fdistance)
{
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];	
	if(0 > iaxis || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "MOVE(%f) AXIS(%d)", fdistance, iaxis);
	
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????
Input:          //??????handle  
				iaxis ???
				fdistance ????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Single_MoveAbs(ZMC_HANDLE handle, int iaxis, float fdistance)
{

	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];	
	if(0 > iaxis || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "MOVEABS(%f) AXIS(%d)", fdistance, iaxis);
	
	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}



/*********************??????
/*************************************************************
Description:    //??VR, 
Input:          //??????handle 
				vrstartnum		VR??????
				numes			?????????
				pfValue			?????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetVrf(ZMC_HANDLE handle,int vrstartnum, int numes, float *pfValue)
{
	//int i;
	//int32 iresult;
	//
	//char  cmdbuff[2048];
	//char  cmdbuffAck[2048];
	//if(NULL == pfValue || numes < 0)
	//{
	//	return  ERR_AUX_PARAERR;
	//}
	//
	//for(i = 0; i< numes; i++)
	//{
	//	//
	//	sprintf(cmdbuff, "VR(%d) =  %f ", (i + vrstartnum) , pfValue[i]);
	//	//???????????????
	//	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	//	if(ERR_OK != iresult)
	//	{
	//		return iresult;
	//	}
	//}
	//
	//return ERR_OK;

	int i, icur, isend;
	int32 iresult;
	char  tempbuff[2048];
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == pfValue || numes < 0)
	{
		return  ERR_AUX_PARAERR;
	}


	isend = 0;
	while(1)
	{
		//??????????40??
		icur = numes - isend;
		if(icur > 200)
		{
			icur = 200;
		}

		iresult = 	ZMC_RegisterWrite(handle,"VR",32,vrstartnum+isend,icur,(uint8*)(pfValue+isend));
		if(ERR_OK != iresult)
		{
			return iresult;
		}

		isend+= icur;
		if(isend >= numes)
		{
			break;
		}
	}
	return ERR_OK;
		
}


/*************************************************************
Description:    //VR???, ?????????????
Input:          //??????handle  
				vrstartnum	?????VR??????
				numes		?????????
Output:         //pfValue  ???????????????????????.
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetVrf(ZMC_HANDLE handle, int vrstartnum, int numes, float *pfValue)
{
	//int i, icur, isend;
	//int32 iresult;
	//char  tempbuff[2048];
	//char  cmdbuff[2048];
	//char  cmdbuffAck[2048];
	//
	//if(NULL == pfValue || numes < 0)
	//{
	//	return  ERR_AUX_PARAERR;
	//}
	//
	//isend = 0;
	//while(1)
	//{
	//	//??????????15??
	//	icur = numes - isend;
	//	if(icur > 15)
	//	{
	//		icur = 15;
	//	}
	//	
	//	//????????
	//	strcpy(cmdbuff, "?");
	//	for(i = 0; i< icur; i++)
	//	{
	//		//
	//		sprintf(tempbuff, "vr(%d) ",vrstartnum+isend+i);
	//		strcat(cmdbuff, tempbuff);
	//	}
	//	
	//	//???????????????
	//	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	//	if(ERR_OK != iresult)
	//	{
	//		return iresult;
	//	}
	//	
	//	//
	//	if(0 == strlen(cmdbuffAck))
	//	{
	//		return ERR_NOACK;
	//	}
	//	
	//	//
	//	iresult = ZAux_TransStringtoFloat(cmdbuffAck, icur, pfValue+isend);
	//	if(ERR_OK != iresult)
	//	{
	//		return iresult;
	//	}
	//	
	//	isend+= icur;
	//	if(isend >= numes)
	//	{
	//		break;
	//	}
	//}
	//
	//
	//return ERR_OK;

	int i, icur, isend;
	int32 iresult;
	char  tempbuff[2048];
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == pfValue || numes < 0)
	{
		return  ERR_AUX_PARAERR;
	}


	isend = 0;
	while(1)
	{
		//??????????40??
		icur = numes - isend;
		if(icur > 200)
		{
			icur = 200;
		}

		iresult = ZMC_RegisterRead(handle,"VR",32,vrstartnum+isend,icur,(uint8*)(pfValue+isend));
		if(ERR_OK != iresult)
		{
			return iresult;
		}

		isend+= icur;
		if(isend >= numes)
		{
			break;
		}
	}
	return ERR_OK;
}

/*************************************************************
Description:    //VRINT????? ????150401???????????VRINT??DIRECTCOMMAND???
Input:          //??????handle  
				vrstartnum	?????VR??????
				numes		?????????
				Output:         //piValue  ???????????????????????.
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetVrInt(ZMC_HANDLE handle, int vrstartnum, int numes, int *piValue)
{
	int i, icur, isend;
	int32 iresult;
	char  tempbuff[2048];
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	
	if(NULL == piValue || numes < 0)
	{
		return  ERR_AUX_PARAERR;
	}
	
	isend = 0;
	while(1)
	{
		//??????????15??
		icur = numes - isend;
		if(icur > 15)
		{
			icur = 15;
		}
		
		//????????
		strcpy(cmdbuff, "?");
		for(i = 0; i< icur; i++)
		{
			//
			sprintf(tempbuff, "vr_int(%d) ",vrstartnum+isend+i);
			strcat(cmdbuff, tempbuff);
		}
		
		//???????????????
		iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
		if(ERR_OK != iresult)
		{
			return iresult;
		}
		
		//
		if(0 == strlen(cmdbuffAck))
		{
			return ERR_NOACK;
		}
		
		//
		iresult = ZAux_TransStringtoInt(cmdbuffAck, icur, piValue+isend);
		if(ERR_OK != iresult)
		{
			return iresult;
		}
		
		isend+= icur;
		if(isend >= numes)
		{
			break;
		}
	}
	
	return ERR_OK;
}

/*************************************************************
Description:    //??table 
Input:          //??????handle 
				tabstart	?????TABLE??????
				numes		?????????
				pfValue		??????????
Output:         //	
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetTable(ZMC_HANDLE handle,int tabstart, int numes, float *pfValue)
{
	int i ,icur;
	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	char  tempbuff[2048];
	
	if(NULL == pfValue || numes < 1)
	{
		return  ERR_AUX_PARAERR;
	}

	int isend = 0;
	while(1)
	{
		//??????????15??
		icur = numes - isend;
		if(icur > 15)
		{
			icur = 15;
		}

		//????????
		sprintf(cmdbuff, "table(%d",tabstart+isend);
		for(i = 0; i< icur; i++)
		{
			//
			sprintf(tempbuff, ",%f",pfValue[isend+i]);
			strcat(cmdbuff, tempbuff);
		}
		sprintf(tempbuff, ")");
		strcat(cmdbuff, tempbuff);

		//???????????????
		iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
		if(ERR_OK != iresult)
		{
			return iresult;
		}

		//
		isend+= icur;
		if(isend >= numes)
		{
			break;
		}
	}
	
	return ERR_OK;
	
	
}

/*************************************************************
Description:    //table???, ?????????????
Input:          //??????handle  
				tabstart	???TABLE??????
				numes		?????????
Output:         //pfValue  ?????????????.
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetTable(ZMC_HANDLE handle, int tabstart, int numes, float *pfValue)
{
	int i, icur, isend;
	int32 iresult;
	char  tempbuff[2048];
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == pfValue || numes < 0)
	{
		return  ERR_AUX_PARAERR;
	}
	
	
	isend = 0;
	while(1)
	{
		//??????????15??
		icur = numes - isend;
		if(icur > 15)
		{
			icur = 15;
		}
		
		//????????
		strcpy(cmdbuff, "?");
		for(i = 0; i< icur; i++)
		{
			//
			sprintf(tempbuff, "TABLE(%d) ",tabstart+isend+i);
			strcat(cmdbuff, tempbuff);
		}
		
		//???????????????
		iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
		if(ERR_OK != iresult)
		{
			return iresult;
		}
		
		//
		if(0 == strlen(cmdbuffAck))
		{
			return ERR_NOACK;
		}
		
		//
		iresult = ZAux_TransStringtoFloat(cmdbuffAck, icur, pfValue+isend);
		if(ERR_OK != iresult)
		{
			return iresult;
		}
		
		isend+= icur;
		if(isend >= numes)
		{
			break;
		}
	}
	
	
	return ERR_OK;
}



#if 0
//????????
#endif

/*************************************************************
Description:    //???????float
Input:          //??????handle 
				pstringin ??????????
				inumes   ??????????
Output:         //pfvlaue ?????????
Return:         //??????
*************************************************************/
int32  ZAux_TransStringtoFloat(const char* pstringin, int inumes,  float* pfvlaue)
{
    char *ptemp;
	
    ptemp = (char*)pstringin;
    while(' ' == *ptemp)
    {
        ptemp++;
    }
    
    if(!(isdigit(ptemp[0]) || ('-' == ptemp[0])))
    {
        return ERR_ACKERROR;
    }
	
    char *pstringnew = ptemp;
    
    //                
    for(int i =0; i < inumes;i++)
    {
		
        while((' ' == *pstringnew) || ('\t' == *pstringnew))
        {
            pstringnew++;
        }
        if(('\0' == pstringnew[0]) || ('\r' == pstringnew[0]) || ('\n' == pstringnew[0]) || !(isdigit(pstringnew[0]) || ('-' == pstringnew[0])))
        {
            break;
        }
		
        double dvalue = strtod(pstringnew, &ptemp);
        if((pstringnew == ptemp))
        {
            //break;
            return ERR_ACKERROR;
        }    
		
        pfvlaue[i] = dvalue;
        
        //?????????
        pstringnew = ptemp;
    }
	
	
    return ERR_OK;
}

/*************************************************************
Description:    //???????int
Input:          //??????handle 
				pstringin ??????????
				inumes   ??????????
Output:         //pivlaue ?????????
Return:         //??????
*************************************************************/
int32  ZAux_TransStringtoInt(const char* pstringin, int inumes,  int* pivlaue)
{
    char *ptemp;
	
    ptemp = (char*)pstringin;
    while(' ' == *ptemp)
    {
        ptemp++;
    }
    
    if(!(isdigit(ptemp[0]) || ('-' == ptemp[0])))
    {
        return ERR_ACKERROR;
    }
	
    char *pstringnew = ptemp;
    
    //               
    for(int i =0; i < inumes;i++)
    {
		
        while((' ' == *pstringnew) || ('\t' == *pstringnew))
        {
            pstringnew++;
        }
        if(('\0' == pstringnew[0]) || ('\r' == pstringnew[0]) || ('\n' == pstringnew[0]) || !(isdigit(pstringnew[0]) || ('-' == pstringnew[0])))
        {
            break;
        }
		
        double dvalue = strtod(pstringnew, &ptemp);
        if((pstringnew == ptemp))
        {
            //break;
            return ERR_ACKERROR;
        }    
		
        pivlaue[i] = dvalue;    //?????????
        
        //?????????
        pstringnew = ptemp;
    }
	
	
    return ERR_OK;
}


#if 0
//U????????????
#endif

/*************************************************************
Description:    //??float?????????????????????? ?????????U???????????.
Input:          //sFilename ???????????
				pVarlist	?????????????
				inum		????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_WriteUFile(const char *sFilename, float *pVarlist, int inum)
{
    FILE *pfile;
	
    //???????
    pfile = fopen(sFilename, "wb");
    if(NULL == pfile)
    {
        //
        ZAUX_ERROR("open file:%s err", sFilename);
        return ERR_AUX_FILE_ERROR;
    }
	
    fseek(pfile, 0, SEEK_SET);
	
	if(fwrite(pVarlist, 4, inum, pfile) != inum)
	{
        //
        ZAUX_ERROR("fwrite size != %d", inum);
        fclose(pfile);
        return ERR_AUX_OS_ERR;
	}
	
	//??????
	fclose(pfile);
	return ERR_OK;
}

/*************************************************************
Description:    //???float?????????????? ?????????U???????????.
Input:          //sFilename ???????????
				inum		????????	
Output:         //pVarlist	?????????????
Return:         //??????
*************************************************************/
int32  ZAux_ReadUFile(const char *sFilename, float *pVarlist, int* pinum)
{
    FILE *pfile;
    uint32 uifilesize;
	
    //??????
    pfile = fopen(sFilename, "rb");
    if(NULL == pfile)
    {
        //
        ZAUX_ERROR("open file:%s err", sFilename);
        return ERR_AUX_FILE_ERROR;
    }
    fseek(pfile, 0, SEEK_END);
	
    uifilesize = ftell(pfile);
	
    fseek(pfile, 0, SEEK_SET);	
	if(fread(pVarlist, 1, uifilesize, pfile) != uifilesize)
	{
        //
        ZAUX_ERROR("read size != %d", uifilesize);
        fclose(pfile);
		
        return ERR_AUX_OS_ERR;
	}
	//??????
	fclose(pfile);
	
	*pinum = uifilesize/4;
	return ERR_OK;
}



/*************************************************************
Description:    //modbus????????? modbus_bit
Input:          //??????handle ????????
				start	??????
				inum	????
				pdata ?????????  ???????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Modbus_Set0x(ZMC_HANDLE handle, uint16 start, uint16 inum, uint8* pdata)
{
	int32 iresult;
	iresult = ZMC_Modbus_Set0x(handle,start,inum,pdata);
	
	return iresult;
}

/*************************************************************
Description:    //modbus????????? modbus_bit
Input:          //??????handle ????????
				start	??????
				inum	????
Output:         //pdata ?????????  ???????
Return:         //??????
*************************************************************/
int32  ZAux_Modbus_Get0x(ZMC_HANDLE handle, uint16 start, uint16 inum, uint8* pdata)
{
	int32 iresult;
	iresult = ZMC_Modbus_Get0x(handle,start,inum, pdata);
	
	return iresult;
}

/*************************************************************
Description:    //modbus?????????		MODBUS_REG
Input:          //??????handle ????????
				start	??????
				inum	????
				pdata	?????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Modbus_Set4x(ZMC_HANDLE handle, uint16 start, uint16 inum, uint16* pdata)
{
	int32 iresult;
	iresult = ZMC_Modbus_Set4x(handle,start,inum, pdata);
	
	return iresult;
}

/*************************************************************
Description:    //modbus????????? MODBUS_REG
Input:          //??????handle ????????
				start	??????
				inum	????
Output:         //pdata	?????REG??????
Return:         //??????
*************************************************************/
int32  ZAux_Modbus_Get4x(ZMC_HANDLE handle, uint16 start, uint16 inum, uint16* pdata)
{
	int32 iresult;
	iresult = ZMC_Modbus_Get4x(handle, start, inum, pdata);
	
	return iresult;
}

/*************************************************************
Description:    //modbus?????????		MODBUS_IEEE
Input:          //??????handle ????????
				start	??????
				inum	????
				pfdata	?????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Modbus_Get4x_Float(ZMC_HANDLE handle, uint16 start, uint16 inum, float* pfdata)
{
	int 	i,j;
	int32 	iresult;
	void * pf;
	uint16 * pi;
	uint16  tempdata[2048];
	
	if(NULL == pfdata || inum < 0)
	{
		return  ERR_AUX_PARAERR;
	}
	
	
	pi = tempdata;
	pf = pfdata;
	
	iresult = ZMC_Modbus_Get4x(handle,start,inum*2,tempdata);
	if(iresult == 0)
	{
		
		for(i=1;i<inum +1;i++)
		{
			for(j=0;j<2;j++)
			{
				*((uint16 *)pf + j )  = *(pi +j);
			}
			pf = pfdata +i;
			pi = pi+2;
		}
	}
	
	return iresult;
}

/*************************************************************
Description:    //modbus????????? MODBUS_IEEE
Input:          //??????handle ????????
				start	??????
				inum	????
Output:         //pfdata	?????REG??????
Return:         //??????
*************************************************************/
int32  ZAux_Modbus_Set4x_Float(ZMC_HANDLE handle, uint16 start, uint16 inum, float* pfdata)
{
	int 	i,j;
	int32 	iresult;
	void * pf;
	uint16 * pi;
	uint16  tempdata[2048];
	
	if(NULL == pfdata || inum < 0)
	{
		return  ERR_AUX_PARAERR;
	}
	
	pi = tempdata;
	pf = pfdata;
	
	for(i=1;i<inum +1;i++)
	{
		for(j=0;j<2;j++)
		{
			*(pi +j) = *((uint16 *)pf + j);
		}
		pf = pfdata +i;
		pi = pi+2;
	}	
	iresult = ZMC_Modbus_Set4x(handle,start,inum*2,tempdata);
	return iresult;
}

/*************************************************************
Description:    //modbus?????????		MODBUS_LONG
Input:          //??????handle ????????
				start	??????
				inum	????
				pidata	?????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Modbus_Get4x_Long(ZMC_HANDLE handle, uint16 start, uint16 inum, int32 * pidata)
{
	int 	i,j;
	int32 	iresult;
	void * pitemp;
	uint16 * pi;
	uint16  tempdata[2048];
	
	if(NULL == pidata || inum < 0)
	{
		return  ERR_AUX_PARAERR;
	}
	
	pi = tempdata;
	pitemp = pidata;
	
	iresult = ZMC_Modbus_Get4x(handle,start,inum*2,tempdata);
	if(iresult == 0)
	{
		
		for(i=1;i<inum +1;i++)
		{
			for(j=0;j<2;j++)
			{
				*((uint16 *)pitemp + j )  = *(pi +j);
			}
			pitemp = pidata +i;
			pi = pi+2;
		}
	}
	
	return iresult;
}

/*************************************************************
Description:    //modbus????????? MODBUS_LONG
Input:          //??????handle ????????
				start	??????
				inum	????
Output:         //pidata	?????REG??????
Return:         //??????
*************************************************************/
int32  ZAux_Modbus_Set4x_Long(ZMC_HANDLE handle, uint16 start, uint16 inum, int32 * pidata)
{
	int 	i,j;
	int32 	iresult;
	void * pitemp;
	uint16 * pi;
	uint16  tempdata[2048];
	
	if(NULL == pidata || inum < 0)
	{
		return  ERR_AUX_PARAERR;
	}
	
	pi = tempdata;
	pitemp = pidata;
	
	for(i=1;i<inum +1;i++)
	{
		for(j=0;j<2;j++)
		{
			*(pi +j) = *((uint16 *)pitemp + j);
		}
		pitemp = pidata +i;
		pi = pi+2;
	}	
	iresult = ZMC_Modbus_Set4x(handle,start,inum*2,tempdata);
	return iresult;
}

/*************************************************************
Description:    //???modbus_string
Input:          //??????handle
				start	modbus??????
				inum	????			
Output:         pidata	?????????????
Return:         //??????
*************************************************************/
int32  ZAux_Modbus_Get4x_String(ZMC_HANDLE handle, uint16 start, uint16 inum, char * pidata)
{
	int 	i;
	int32 	iresult;
	uint16  tempdata[2048];
	uint16 charnum;

	if(NULL == pidata || inum < 0 || inum > 2048 )
	{
		return  ERR_AUX_PARAERR;
	}
	
	charnum = (inum - 1)/2 + 1;

	iresult = ZMC_Modbus_Get4x(handle,start,charnum,tempdata);
	if(iresult == 0)
	{	
		for(i=0;i<inum ;i++)
		{
			if(i%2 == 0)
			{
				*(pidata + i) = (char)(tempdata[i/2]);
			}
			else
			{
				*(pidata + i) = (char)(tempdata[i/2]>>8);
			}
		}
	}
	
	return iresult;
}

/*************************************************************
Description:    //????modbus_string
Input:          //??????handle
				start	modbus??????
				inum	????
				pidata	??????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Modbus_Set4x_String(ZMC_HANDLE handle, uint16 start, uint16 inum, char * pidata)
{
	int 	i;
	int32 	iresult;
	uint16  tempdata[2048];
	uint16 charnum;

	if(NULL == pidata || inum < 0 || inum > 2048 )
	{
		return  ERR_AUX_PARAERR;
	}

	for(i=0;i<inum ;i++)
		{
			if(i%2 == 0)
			{
				tempdata[i/2] =(uint16)(*(pidata + i));
			}
			else
			{
				tempdata[i/2] =(uint16)(*(pidata + i)) * 256 + tempdata[i/2];
			}
		}
	
	charnum = (inum - 1)/2 + 1;

	iresult = ZMC_Modbus_Set4x(handle,start,charnum,tempdata);

	return iresult;
}



/*************************************************************
Description:    //?????flash??, float????
Input:          //??????handle
				uiflashid 	flash???
				uinumes		????????
				pfvlue		????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_FlashWritef(ZMC_HANDLE handle, uint16 uiflashid, uint32 uinumes, float *pfvlue)
{
	int32 iresult;
	iresult = ZMC_FlashWritef(handle, uiflashid, uinumes,pfvlue);
	
	return iresult;
}


/*************************************************************
Description:    //??????flash??, float????
Input:          //??????handle
uiflashid 	flash???
uibuffnum	???????????
Output:         //
puinumesread ??????????????
Return:         //??????
*************************************************************/
int32  ZAux_FlashReadf(ZMC_HANDLE handle, uint16 uiflashid, uint32 uibuffnum, float *pfvlue, uint32* puinumesread)
{
	int32 iresult;
	iresult = ZMC_FlashReadf(handle, uiflashid, uibuffnum,pfvlue,puinumesread);
	return iresult;
}


/***********************************2018-08-24 V2.1????????****************************************************************************
????????????????
??????????????
***************************************************************************************************************************************/

/*************************************************************
Description:    //????????????? 150723????????
Input:          //??????handle  
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Trigger(ZMC_HANDLE handle)
{

	//???????????????
		char  cmdbuffAck[2048];
		return ZAux_Execute(handle, "Trigger", cmdbuffAck, 2048);
}


//MOVE_PARA,MOVE_PWM, MOVE_SYNMOVE,MOVE_ASYNMOVE
/*************************************************************
Description:    //???????????. 20170503?????????
Input:          //??????handle  
				base_axis ???????
				paraname  ??????????????????
				iaxis	  ??????????
				fvalue	  ?????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MovePara(ZMC_HANDLE handle,uint32 base_axis,char *  paraname,uint32 iaxis,float fvalue)
{
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(0 > iaxis || iaxis > MAX_AXIS_AUX || 0 > base_axis|| base_axis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
	int32 iresult;

	sprintf(cmdbuff, "MOVE_PARA(%s,%d,%f) axis(%d)",paraname,iaxis,fvalue,base_axis);

	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	return ERR_OK;
}

/*************************************************************
Description:    //????????PWM 20170503?????????
Input:          //??????handle  
				base_axis	??G??????
				pwm_num		PWM????
				pwm_duty	????0-1
				pwm_freq	??? ???PWM 1M ?? ????PWM  2k 
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MovePwm(ZMC_HANDLE handle,uint32 base_axis,uint32 pwm_num,float pwm_duty,float pwm_freq)
{
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(0 > base_axis|| base_axis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
	int32 iresult;

	sprintf(cmdbuff, "MOVE_PWM(%d,%f,%f) axis(%d)",pwm_num,pwm_duty,pwm_freq,base_axis);

	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	return ERR_OK;
}

/*************************************************************
Description:    //??????????????????,. 20170503?????????
Input:          //??????handle
				base_axis ???????
				iaxis	  ??????
				fdist	  ????????????
				ifsp	  ??????SP???
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveSynmove(ZMC_HANDLE handle,uint32 base_axis,uint32 iaxis,float fdist,uint32 ifsp)
{
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(0 > iaxis || iaxis > MAX_AXIS_AUX || 0 > base_axis|| base_axis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
	int32 iresult;

	sprintf(cmdbuff, "MOVE_SYNMOVE(%d,%f,%d) axis(%d)",iaxis,fdist,ifsp,base_axis);

	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	return ERR_OK;
}

/*************************************************************
Description:    //???????????????????. 20170503?????????
Input:          //??????handle
				base_axis ???????
				iaxis	  ????????????????????
				fdist	  ?????????????
				ifsp	  ??????SP???
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveASynmove(ZMC_HANDLE handle,uint32 base_axis,uint32 iaxis,float fdist,uint32 ifsp)
{
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(0 > iaxis || iaxis > MAX_AXIS_AUX || 0 > base_axis|| base_axis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
	int32 iresult;

	sprintf(cmdbuff, "MOVE_ASYNMOVE(%d,%f,%d) axis(%d)",iaxis,fdist,ifsp,base_axis);

	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	return ERR_OK;
}

/*************************************************************
Description:    //????????TABLE
Input:          //??????handle  
				base_axis	??G??????
				table_num	TABLE???
				fvalue		????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveTable(ZMC_HANDLE handle,uint32 base_axis,uint32 table_num,float fvalue)
{
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(0 > base_axis|| base_axis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
	int32 iresult;

	sprintf(cmdbuff, "MOVE_TABLE(%d,%f) axis(%d)",table_num,fvalue,base_axis);

	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	return ERR_OK;
}

/*************************************************************
Description:    //BASE??????????????????????  ???150802???????? ??XPLC160405??????????
Input:          //??????handle  
				base_axis	??G??????
				paraname	??????????? DPOS MPOS IN AIN VPSPEED MSPEED MODBUS_REG MODBUS_IEEE MODBUS_BIT NVRAM VECT_BUFFED  REMAIN 
				inum		???????????
				Cmp_mode	??????? 1 >=   0=  -1<=  ??IN??BIT?????????????
				fvalue		????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveWait(ZMC_HANDLE handle,uint32 base_axis,char * paraname,int inum,int Cmp_mode,float fvalue)
{
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(0 > base_axis|| base_axis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
	int32 iresult;

	sprintf(cmdbuff, "MOVE_Wait(%s,%d,%d,%f) axis(%d)",paraname,inum,Cmp_mode,fvalue,base_axis);

	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	return ERR_OK;
}

/*************************************************************
Description:    //BASE???????????????TASK???? ?????????????????????????????????????
Input:          //??????handle			
				base_axis	??G??????
				tasknum   	?????? 
				labelname		BAS????????????????

Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MoveTask(ZMC_HANDLE handle,uint32 base_axis,uint32 tasknum,char * labelname)
{
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(0 > base_axis|| base_axis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
	int32 iresult;

	sprintf(cmdbuff, "MOVE_TASK(%d,%s) axis(%d)",tasknum,labelname,base_axis);

	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	return ERR_OK;
}

/*************************************************************
Description:    //??????PSWITCH
Input:          //??????handle
				//???????? num 0-15
				//???????? enable 0/1
				//??????? axisnum
				//??????? outnum
				//?????	outstate 0/1
				//??????????	setpos
				//??????????	resetpos
Return:         //??????
*************************************************************/
int32  ZAux_Direct_Pswitch(ZMC_HANDLE handle, int num, int enable, int axisnum, int outnum, int  outstate, float setpos,float resetpos)
{
	if(0 > num || num > 15)
	{
		return  ERR_AUX_PARAERR;
	}	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	sprintf(cmdbuff, "PSWITCH(%d,%d,%d,%d,%d,%f,%f)", num,enable,axisnum,outnum,outstate,setpos,resetpos);
	//???????????????
	//return ZAux_DirectCommand(handle, cmdbuff, NULL, 0);
	return ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
}

/*************************************************************
Description:    //???????????? 4?????????????????????????????????
Input:          //??????handle
				//??	 mode 1-?????????, 2- ???????????????.
				//???? direction 0-??????,  1- ????????  
				//??? Reserve   ???
				//TABLE????? Tablestart  ?????????????????TABLE???
				//TABLE?????? tableend ??????????????????TABLE???
Return:         //??????
*************************************************************/
int32  ZAux_Direct_HwPswitch(ZMC_HANDLE handle,int Axisnum,int Mode, int Direction, int Reserve, int Tablestart, int  Tableend)
{
	if(0 > Axisnum || Axisnum > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	sprintf(cmdbuff, "HW_PSWITCH(%d,%d,%d,%d,%d) AXIS(%d)", Mode, Direction, Reserve, Tablestart, Tableend,Axisnum);
	//???????????????
	//return ZAux_DirectCommand(handle, cmdbuff, NULL, 0);
	return ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
}


/*************************************************************
Description:    //??????????????????? 4?????????????????????????????????
Input:          //??????handle
				//??	 axisnum				???
output:			//????????????????		buff
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetHwPswitchBuff(ZMC_HANDLE handle,int axisnum,int * buff)
{
	if(0 > axisnum || axisnum > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}	
	int32 iresult;
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	sprintf(cmdbuff, "?HW_PSWITCH(%d)", axisnum);
	//???????????????
	//iresult =  ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	iresult =  ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",buff);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????????????????????????? 4?????????
Input:          //??????	handle  
				//??			mode		0??,  2-????			
				//???????	   cyclonetime  us????
				//???????	   optime		us????
				//???????	   reptimes
				//??????? opstate		??????????????????
				// ???????  opnum		??????????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_HwTimer(ZMC_HANDLE handle,int mode,int cyclonetime,int optime,int reptimes,int opstate,int  opnum )
{
	
	char  cmdbuff[2048];
    //????????
	sprintf(cmdbuff, "HW_TIMER(%d,%d,%d,%d,%d,%d)",mode,cyclonetime,optime,reptimes,opstate,opnum);
	//???????????????
	//return ZAux_DirectCommand(handle, cmdbuff, NULL, 0);
	return ZAux_Execute(handle, cmdbuff, NULL,0);
}

/*************************************************************
Description:    //??????????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ???????????AXISSTATUS????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetAxisStopReason(ZMC_HANDLE handle, int iaxis, int *piValue)
{
	int32 iresult;
	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(NULL == piValue || iaxis > MAX_AXIS_AUX || iaxis < 0)
	{
		return  ERR_AUX_PARAERR;
	}
	
    //????????
	sprintf(cmdbuff, "?AXIS_STOPREASON(%d)", iaxis);
	
	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
        return iresult;
	}
	
	//
	if(0 == strlen(cmdbuffAck))
	{
        return ERR_NOACK;
	}
	
	//
	sscanf(cmdbuffAck, "%d",piValue);
	
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????????
Input:          //??????handle 
				sParam ??????????????
				imaxaxis ??????
Output:         pfValue  ??????????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetAllAxisPara(ZMC_HANDLE handle,const char *sParam,int imaxaxis,float * pfValue)
{

	int32 iresult;
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == pfValue || imaxaxis <=0 || imaxaxis > MAX_AXIS_AUX)
	{
	return  ERR_AUX_PARAERR;
	}

	strcpy(cmdbuff, "?*");
	strcat(cmdbuff, sParam);

	//???????????????
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
			return iresult;
	}

	//
	if(0 == strlen(cmdbuffAck))
	{
			return ERR_NOACK;
	}

	//
	iresult = ZAux_TransStringtoFloat(cmdbuffAck,imaxaxis,pfValue);
	if(ERR_OK != iresult)
	{
	return iresult;
	}
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????????  IdleStatus-????? DposStatus-????????  MposStatus-????????  AxisStatus-????
Input:          //??????handle 
				imaxaxis ??????
Output:         IdleStatus ?????
				DposStatus ????????
				MposStatus ????????
				AxisStatus ????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetAllAxisInfo(ZMC_HANDLE handle,int imaxaxis,int * IdleStatus,float * DposStatus,float * MposStatus,int * AxisStatus)
{
	int32 iresult = 0;
	if(imaxaxis <=0 || imaxaxis > MAX_AXIS_AUX || NULL == IdleStatus || NULL == DposStatus || NULL == MposStatus || NULL == AxisStatus)
	{
	return  ERR_AUX_PARAERR;
	}
	float pi_idle[MAX_AXIS_AUX],pf_axisstatus[MAX_AXIS_AUX];
	iresult += ZAux_Direct_GetAllAxisPara(handle,"IDLE",imaxaxis,pi_idle);
	iresult += ZAux_Direct_GetAllAxisPara(handle,"DPOS",imaxaxis,DposStatus);
	iresult += ZAux_Direct_GetAllAxisPara(handle,"MPOS",imaxaxis,MposStatus);
	iresult += ZAux_Direct_GetAllAxisPara(handle,"AXISSTATUS",imaxaxis,pf_axisstatus);

	if(iresult == ERR_OK)
	{
		for(int i = 0;i<imaxaxis;i++)
		{
			*(IdleStatus + i ) = (int)pi_idle[i];
			*(AxisStatus + i ) = (int)pf_axisstatus[i];
		}
	}
	return iresult;
}

/*************************************************************
Description:    //????BASIC????????????  
Input:          //??????handle  
				arrayname ????????
				arraystart ??????????
				numes		???????
				pfValue     ?????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetUserArray(ZMC_HANDLE handle,char * arrayname ,int arraystart, int numes, float *pfValue)
{
	int i;
	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == pfValue || numes < 0)
	{
		return  ERR_AUX_PARAERR;
	}

	for(i = 0; i< numes; i++)
	{
		//
		sprintf(cmdbuff, "%s(%d) =  %f ",arrayname ,(i + arraystart) , pfValue[i]);
		//???????????????
		iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
		if(ERR_OK != iresult)
		{
			return iresult;
		}
	}

	return ERR_OK;


}

/*************************************************************
Description:    //???????BASIC???????????? , ?????????????
Input:          //??????handle  
				arrayname ????????
				arraystart ??????????
				numes		???????
Output:         //pfValue  ?????????????.
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetUserArray(ZMC_HANDLE handle,char * arrayname ,int arraystart, int numes, float *pfValue)
{
	int i, icur, isend;
	int32 iresult;
	char  tempbuff[2048];
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == pfValue || numes < 0)
	{
		return  ERR_AUX_PARAERR;
	}

	isend = 0;
	while(1)
	{
		//??????????30??
		icur = numes - isend;
		if(icur > 30)
		{
			icur = 30;
		}

		//????????
		strcpy(cmdbuff, "?*");

		//
		sprintf(tempbuff, "%s(%d,%d)",arrayname,arraystart+isend,icur);
		strcat(cmdbuff, tempbuff);


		//???????????????
		iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
		//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
		if(ERR_OK != iresult)
		{
			return iresult;
		}

		//
		if(0 == strlen(cmdbuffAck))
		{
			return ERR_NOACK;
		}

		//
		iresult = ZAux_TransStringtoFloat(cmdbuffAck, icur, pfValue+isend);
		if(ERR_OK != iresult)
		{
			return iresult;
		}

		isend+= icur;
		if(isend >= numes)
		{
			break;
		}
	}

	return ERR_OK;
}

/*************************************************************
Description:    //????????????, 
Input:          //??????handle  
				varname ?????????????
				pfValue	???
Output:         //  
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetUserVar(ZMC_HANDLE handle,char * varname , float pfValue)
{
	int32 iresult;
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	//
	sprintf(cmdbuff, "%s = %f",varname,pfValue);


	//???????????????
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	return ERR_OK;
}

/*************************************************************
Description:    //??????????????, 
Input:          //??????handle  
				varname ?????????????
Output:         //pfValue  ?????????????.
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetUserVar(ZMC_HANDLE handle,char * varname , float *pfValue)
{
	int32 iresult;
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == pfValue)
	{
		return  ERR_AUX_PARAERR;
	}

	//
	sprintf(cmdbuff, "?%s",varname);


	//???????????????
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	//
	if(0 == strlen(cmdbuffAck))
	{
		return ERR_NOACK;
	}

	//
	sscanf(cmdbuffAck, "%f",pfValue);

	return ERR_OK;
}


/*************************************************************
Description:    //???????????????
Input:          //PCI????? ?????0?????????????PCI????+1(??????PCI??????)
Output:         //??????handle
Return:         //??????
*************************************************************/
int32  ZAux_OpenPci(uint32 cardnum, ZMC_HANDLE * phandle)
{
	int32 iresult;
    char buffer[1024];
	sprintf(buffer, "PCI%d", cardnum + 1);

	iresult = ZMC_Open(ZMC_CONNECTION_PCI,buffer, phandle);
	return iresult;
}

/*************************************************************
Description:    //???PCI??????????
Input:          //
Return:         //???????PCI??????
*************************************************************/
int32  ZAux_GetMaxPciCards()
{
	return ZMC_GetMaxPciCards();
}

/*************************************************************
Description:    //??????????????
Input:          //??????handle  
Output:         SoftType ?????????????
				SoftVersion ???????????????????????
				ControllerId	?????????ID
Return:         //??????
*************************************************************/
int32  ZAux_GetControllerInfo(ZMC_HANDLE handle ,char * SoftType ,char * SoftVersion ,char *  ControllerId)
{

	int32 iresult;
	char  cmdbuffAck[2048];

	//??????? ?CONTROL SoftType   
	iresult = ZAux_Execute(handle, "?CONTROL", cmdbuffAck,2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}
	//
	if(0 == strlen(cmdbuffAck))
	{
		return ERR_NOACK;
	}
	//
	sscanf(cmdbuffAck, "%s",SoftType);


	//?VERSION_DATE SoftVersion
	iresult = ZAux_Execute(handle, "?VERSION_DATE", cmdbuffAck,2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}
	//
	if(0 == strlen(cmdbuffAck))
	{
		return ERR_NOACK;
	}
	//
	sscanf(cmdbuffAck, "%s",SoftVersion);

	//??????ID  ?SERIAL_NUMBER
	iresult = ZAux_Execute(handle, "?SERIAL_NUMBER", cmdbuffAck,2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}
	//
	if(0 == strlen(cmdbuffAck))
	{
		return ERR_NOACK;
	}
	//
	sscanf(cmdbuffAck, "%s",ControllerId);

	return ERR_OK;
}


/**************************************************??????????***********************************************
??????????Execute???????  
????????????????
????????????????????
***************************************************************************************************************/

/*************************************************************
Description:    //???????????????
Input:          //??????handle 
:				 //slot ????????0
Output:         //piValue ????????????????
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_GetNodeNum(ZMC_HANDLE handle,int slot,int *piValue)
{
	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == piValue)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff, "?NODE_COUNT(%d)", slot);

	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	//
	if(0 == strlen(cmdbuffAck))
	{
		return ERR_NOACK;
	}

	//
	sscanf(cmdbuffAck, "%d",piValue);

	return ERR_OK;
}

/*************************************************************
Description:    //????????????
Input:          //??????handle 
				slot	??????
				node	?????
				sel		??????	0-??????1-?????? 2-?????? 3-???? 10-IN???? 11-OUT???? 
Output:         //piValue ???????
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_GetNodeInfo(ZMC_HANDLE handle,int slot,int node,int sel ,int *piValue)
{
	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == piValue)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff, "?NODE_INFO(%d,%d,%d)", slot,node,sel);

	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	//
	if(0 == strlen(cmdbuffAck))
	{
		return ERR_NOACK;
	}
	//
	sscanf(cmdbuffAck, "%d",piValue);
	return ERR_OK;
}

/*************************************************************
Description:    //????????????
Input:          //??????handle  
				slot ????????0
				node ?????
Output:         //nodestatus ???????? bit0-?????????  bit1-????   bit2-?????
??1???bit0?1??bit1??bit2?0???????????
??3???bit0??bit1?1??bit2?0???????????
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_GetNodeStatus(ZMC_HANDLE handle,uint32 slot,uint32 node,uint32 * nodestatus)
{

	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == nodestatus)
	{
		return  ERR_AUX_PARAERR;
	}
	//????????
	sprintf(cmdbuff, "?NODE_STATUS(%d,%d)", slot,node);
	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	//
	if(0 == strlen(cmdbuffAck))
	{
		return ERR_NOACK;
	}
	//
	sscanf(cmdbuffAck, "%d",nodestatus);
	return ERR_OK;
}

/*************************************************************
Description:    //??????SDO???????
Input:          //??????handle  
				slot	?????? ??0
				node	?????
				index	????????????????10?????????
				subindex	????	????????10?????????
				type	????????  1-bool 2-int8 3-int16 4-int32 5-uint8 6-uint16 7-uint32
Output:         //value ??????????
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_SDORead(ZMC_HANDLE handle,uint32 slot,uint32 node,uint32 index,uint32 subindex ,uint32 type ,int32 * value)
{

	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == value || node > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff, "SDO_READ(%d,%d,%d,%d,%d,0)",slot, node,index,subindex,type);

	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(0 != strlen(cmdbuffAck))
	{
		return ERR_AUX_NOTSUPPORT;
	}
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	//
	float fvalue = 0;
	iresult = ZAux_Direct_GetTable(handle,0,1,&fvalue);
	if(ERR_OK != iresult)
	{
		return iresult;
	}	
	*value = (int)fvalue;
	return ERR_OK;
}

/*************************************************************
Description:    //?????SDO???????
Input:          //??????handle  
				slot	?????? ??0
				node	?????
				index	????????????????10?????????
				subindex	????	????????10?????????
				type	????????  1-bool 2-int8 3-int16 4-int32 5-uint8 6-uint16 7-uint32
				value	?????????
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_SDOWrite(ZMC_HANDLE handle,uint32 slot,uint32 node,uint32 index,uint32 subindex ,uint32 type ,int32  value)
{

	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(node > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff,"SDO_WRITE(%d,%d,%d,%d,%d,%d)",slot, node,index,subindex,type,value);

	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(0 != strlen(cmdbuffAck))
	{
		return ERR_AUX_NOTSUPPORT;
	}

	return iresult;
}

/*************************************************************
Description:    //?????SDO???????
Input:          //??????handle  
				slot	?????? ??0
				node	?????
				index	????????????????10?????????
				subindex	????	????????10?????????
				type	????????  1-bool 2-int8 3-int16 4-int32 5-uint8 6-uint16 7-uint32
Output:         //value ??????????
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_SDOReadAxis(ZMC_HANDLE handle,uint32 iaxis,uint32 index,uint32 subindex ,uint32 type ,int32 * value)
{

	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == value || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff, "SDO_READ_AXIS(%d,%d,%d,%d,0)",iaxis,index,subindex,type);

	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(0 != strlen(cmdbuffAck))
	{
		return ERR_AUX_NOTSUPPORT;
	}
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	//
	float fvalue = 0;
	iresult = ZAux_Direct_GetTable(handle,0,1,&fvalue);
	if(ERR_OK != iresult)
	{
		return iresult;
	}	
	*value = (int)fvalue;
	return ERR_OK;
}

/*************************************************************
Description:    //????SDO???????
Input:          //??????handle  
				slot	?????? ??0
				node	?????
				index	????????????????10?????????
				subindex	????	????????10?????????
				type	????????  1-bool 2-int8 3-int16 4-int32 5-uint8 6-uint16 7-uint32
				value	?????????
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_SDOWriteAxis(ZMC_HANDLE handle,uint32 iaxis,uint32 index,uint32 subindex ,uint32 type ,int32  value)
{

	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff,"SDO_WRITE_AXIS(%d,%d,%d,%d,%d)",iaxis,index,subindex,type,value);

	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(0 != strlen(cmdbuffAck))
	{
		return ERR_AUX_NOTSUPPORT;
	}

	return iresult;
}


/*************************************************************
Description:    //Rtex??????????
Input:          //??????handle  
				iaxis	???
				ipara	????????*256 + ???????  Pr7.11-ipara = 7*256+11
Output:         //value ??????????
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_RtexRead(ZMC_HANDLE handle,uint32 iaxis ,uint32 ipara ,float * value)
{

	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == value || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff, "BASE(%d)\r\nDRIVE_READ(%d,0)",iaxis,ipara);

	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}
	if(0 != strlen(cmdbuffAck))
	{
		return ERR_AUX_NOTSUPPORT;
	}

	//
	iresult = ZAux_Direct_GetVrf(handle,0,1,value);
	if(ERR_OK != iresult)
	{
		return iresult;
	}	
	return ERR_OK;
}

/*************************************************************
Description:    //Rtex?????????
Input:          //??????handle  
				iaxis	???
				ipara	????????*256 + ???????  Pr7.11-ipara = 7*256+11
				value	?????????
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_RtexWrite(ZMC_HANDLE handle,uint32 iaxis ,uint32 ipara,float  value)
{

	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff,"BASE(%d)\r\nDRIVE_WRITE(%d,%f)",iaxis, ipara,value);

	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,0);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(0 != strlen(cmdbuffAck))
	{
		return ERR_AUX_NOTSUPPORT;
	}
	return iresult;
}

/*************************************************************
Description:    //?????????????
Input:          //??????handle  
				iaxis ???
				fValue ??????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_SetDatumOffpos(ZMC_HANDLE handle, int iaxis, float fValue)
{


	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff, "DATUM_OFFSET(%d)=%f", iaxis, fValue);

	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //?????????????
Input:          //??????handle  
				iaxis ???
Output:         //fValue ????????????
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_GetDatumOffpos(ZMC_HANDLE handle, int iaxis, float *fValue)
{
	int32 iresult;
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == fValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff, "?DATUM_OFFSET(%d)", iaxis);

	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	//
	if(0 == strlen(cmdbuffAck))
	{
		return ERR_NOACK;
	}

	//
	sscanf(cmdbuffAck, "%f",fValue);
	return ERR_OK;
}

/*************************************************************
Description:    //??????????????
Input:          //??????handle  
				homemode ???????????????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_Datum(ZMC_HANDLE handle,uint32 iaxis,uint32  homemode)
{

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(0 > iaxis || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	int32 iresult;

	sprintf(cmdbuff, "AXIS_STOPREASON(%d) = 0\r\nDATUM(21,%d) AXIS(%d)",iaxis,homemode,iaxis);


	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,0);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,0);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	return ERR_OK;
}

/*************************************************************
Description:    //???????????????
Input:          //??????handle  
				iaxis ???
Output:         //homestatus ????????? 0-?????? 1??????
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_GetHomeStatus(ZMC_HANDLE handle,uint32 iaxis,uint32 * homestatus)
{

	int32 iresult;
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];	

	if(NULL == homestatus || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	sprintf(cmdbuff, "?DRIVE_STATUS(%d),IDLE(%d),AXIS_STOPREASON(%d)",iaxis,iaxis,iaxis);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,2048);
	if(0 == strlen(cmdbuffAck))
	{
		return ERR_NOACK;
	}
	int temparray[4];
	iresult = ZAux_TransStringtoInt(cmdbuffAck,4,&temparray[0]);
	int tempstatus = temparray[0];
	int idlestatus = temparray[1];
	int stopstatus = temparray[2];

	
	if((idlestatus == -1) && ((tempstatus >> 12	) & 1) == 1 && stopstatus == 0)		//????
	{
		*homestatus = 1;	//???????	
	}
	else
	{
		*homestatus = 0;	//?????????
	}
	return ERR_OK;
}


/*************************************************************
Description:    //??????????????????
Input:          //??????handle 
				iaxis ???
				mode ?? 0-?????????  1-?????????  2-???????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_DriveClear(ZMC_HANDLE handle,uint32 iaxis,uint32  mode)
{

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	
	if(0 > iaxis || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	
	int32 iresult;

	sprintf(cmdbuff, "BASE(%d)\r\nDRIVE_CLEAR(%d)\r\nDATUM(0)",iaxis,mode);

	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,0);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,0);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,0);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck,0);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	return ERR_OK;
}

/*************************************************************
Description:    //?????????????????????	???????????DRIVE_PROFILE????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ??????
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_GetDriveTorque(ZMC_HANDLE handle, int iaxis, int *piValue)
{

	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff, "?DRIVE_TORQUE(%d)", iaxis);

	//???????????????
	//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	//
	if(0 == strlen(cmdbuffAck))
	{
		return ERR_NOACK;
	}

	//
	sscanf(cmdbuffAck, "%d",piValue);
	return ERR_OK;
}

/*************************************************************
Description:    //????????????????????  ???????????DRIVE_PROFILE????
Input:          //??????handle		
				iaxis ???
				piValue ??????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_SetMaxDriveTorque(ZMC_HANDLE handle, int iaxis, int piValue)
{
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}
	//????????
	sprintf(cmdbuff, "DRIVE_TORQUEMAX(%d)=%d", iaxis, piValue);

	//???????????????
	return ZAux_Execute(handle, cmdbuff, cmdbuffAck,0);
	//return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}


/*************************************************************
Description:    //????????????????????  ???????????DRIVE_PROFILE????
Input:          //??????handle  
				iaxis ???
Output:         //piValue ???????????
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_GetMaxDriveTorque(ZMC_HANDLE handle, int iaxis, int *piValue)
{
	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == piValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff, "?DRIVE_TORQUEMAX(%d)", iaxis);

	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	//
	if(0 == strlen(cmdbuffAck))
	{
		return ERR_NOACK;
	}

	//
	sscanf(cmdbuffAck, "%d",piValue);
	return ERR_OK;
}

/*************************************************************
Description:    //???????????? ???????????????  ?????????????????DRIVE_PROFILE???? ??ATYPE
Input:          //??????handle  
				iaxis ???
				????? ????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetDAC(ZMC_HANDLE handle, int iaxis, float fValue)
{


	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
	if( iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff, "DAC(%d)=%f", iaxis, fValue);

	//???????????????
	return ZAux_Execute(handle, cmdbuff, cmdbuffAck,0);
	//return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????? ???????????????  ?????????????????DRIVE_PROFILE???? ??ATYPE
Input:          //??????handle  
				iaxis ???
Output:         //fValue ??????????
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetDAC(ZMC_HANDLE handle, int iaxis, float *fValue)
{

	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == fValue || iaxis > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//????????
	sprintf(cmdbuff, "?DAC(%d)", iaxis);

	//???????????????
	iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
	//iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	if(ERR_OK != iresult)
	{
		return iresult;
	}

	//
	if(0 == strlen(cmdbuffAck))
	{
		return ERR_NOACK;
	}

	//
	sscanf(cmdbuffAck, "%f",fValue);
	return ERR_OK;
}

/*************************************************************
Description:    //???????????  ??????Zmotion tools ????????????????????????????????????
Input:          //??????handle  
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_InitBus(ZMC_HANDLE handle)
{
	return  ZAux_Direct_SetUserVar(handle,"P_BusCmd",2);
}


/*************************************************************
Description:    //????????????????  ??????Zmotion tools ????????????????????????????????????
Input:          //??????handle  
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_BusCmd_GetInitStatus(ZMC_HANDLE handle,int *piValue)
{
	int32 iresult;
	float scan_flag,start_flag;
	if(NULL == piValue)
	{
		return  ERR_AUX_PARAERR;
	}
	iresult = ZAux_Direct_GetUserVar(handle,"Bus_Scan_Status",&scan_flag);
	if(iresult != ERR_OK)
	{
		return iresult;
	}
	iresult = ZAux_Direct_GetUserVar(handle,"Bus_Start_Status",&start_flag);
	if(iresult != ERR_OK)
	{
		return iresult;
	}
	if((int)scan_flag == 1 && (int)start_flag == 1)
	{
		*piValue = 1;
	}
	else
	{
		*piValue = 0;
	}
	return ERR_OK;
}

/*************************************************************
Description:    //?????????????
Input:          //??????handle  
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetInMulti(ZMC_HANDLE handle, int startio , int endio, int32 *piValue)
{

	int32 iresult;

	char  cmdbuff[2048];
	char  cmdbuffAck[2048];

	if(NULL == piValue || startio > endio)
	{
		return  ERR_AUX_PARAERR;
	}

	int32 icur,istart,iend;		//??????32??
	icur=0;
	while(1)
	{
		iend = startio + 31;
		if(iend > endio)
		{
			iend = endio;
		}
		//????????
		sprintf(cmdbuff, "?IN(%d,%d)", startio,iend);

		//???????????????
		//iresult = ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
		iresult = ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
		if(ERR_OK != iresult)
		{
			return iresult;
		}

		//
		if(0 == strlen(cmdbuffAck))
		{
			return ERR_NOACK;
		}

		//
		sscanf(cmdbuffAck, "%d",&piValue[icur]);

		startio = iend + 1;		
		icur ++;
		if(iend == endio)			//??????
		{
			break;
		}
	}

	return ERR_OK;
}

/*************************************************************
Description:    //??????????????
Input:          //??????handle ???????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_SetTimeOut(ZMC_HANDLE  handle, uint32 timems)
{
	g_ZMC_MaxExcuteWaitms = timems;
	return ZMC_SetTimeOut(handle,timems);
}


/*************************************************************
Description:    //????????????2 4??????, 20170513?????????.  ZMC306E/306N???
Input:          //??????					handle
				//??						mode		
				//???????				Opnum		4??? out 0-3?????????????
				//???????????????	Opstate		0-??? 1??										
				//???????				ModePara1	 
				//???????				ModePara2
				//???????				ModePara3
				//???????				ModePara4

mode 1-?????????, 
		ModePara1 =  ?????????????????TABLE???
		ModePara2 =	 ??????????????????TABLE???
		ModePara3 =  ??????????????,  0-??????,  1- ????????,  -1-?????????
		ModePara4 =	 ???

mode 2- ???????????????. 
		ModePara1 =  ???
		ModePara2 =	 ???
		ModePara3 =  ???
		ModePara4 =	 ???

mode 3- ????????
		ModePara1 =  ?????????????????TABLE???
		ModePara2 =	 ??????????????????TABLE???
		ModePara3 =  ???
		ModePara4 =	 ???

Mode=4 :????????, ????????
		ModePara1 =  ????????
		ModePara2 =	 ???
		ModePara3 =  ???
		ModePara4 =	 ???

Mode=5 :????????, ??????????
		ModePara1 =  ????????
		ModePara2 =	 ???????, ???????????????, ???????????,???????????.
		ModePara3 =  ???????, ?????????????Opstate, ??????????????ModePara4????????????.
		ModePara4 =	 ??????????????,  (ModePara3- ModePara4) ???????????

Mode=6 :????????, ??????, ???????????HW_TIMER??????.
		ModePara1 =  ????????
		ModePara2 =	 ???????, ??????????????
		ModePara3 =  ???????, ????????????????
		ModePara4 =	 ???
Return:         //??????
*************************************************************/
int32  ZAux_Direct_HwPswitch2(ZMC_HANDLE handle,int Axisnum,int Mode, int Opnum , int Opstate, float ModePara1, float ModePara2,float ModePara3,float ModePara4)
{
	if(0 > Axisnum || Axisnum > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}	
	char  cmdbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	switch(Mode)
	{
		case 1:
			sprintf(cmdbuff, "HW_PSWITCH2(%d,%d,%d,%f,%f,%f) AXIS(%d)", Mode, Opnum, Opstate, ModePara1,ModePara2,ModePara3,Axisnum);
			break;
		case 2:
			sprintf(cmdbuff, "HW_PSWITCH2(%d) AXIS(%d)", Mode,Axisnum);
			break;
		case 3:
			sprintf(cmdbuff, "HW_PSWITCH2(%d,%d,%d,%f,%f) AXIS(%d)", Mode, Opnum, Opstate, ModePara1,ModePara2,Axisnum);
			break;
		case 4:
			sprintf(cmdbuff, "HW_PSWITCH2(%d,%d,%d,%f) AXIS(%d)", Mode, Opnum, Opstate, ModePara1,Axisnum);
			break;
		case 5:
			sprintf(cmdbuff, "HW_PSWITCH2(%d,%d,%d,%f,%f,%f,%f) AXIS(%d)", Mode, Opnum, Opstate, ModePara1,ModePara2,ModePara3,ModePara4,Axisnum);
			break;
		case 6:
			sprintf(cmdbuff, "HW_PSWITCH2(%d,%d,%d,%f,%f,%f) AXIS(%d)", Mode, Opnum, Opstate, ModePara1,ModePara2,ModePara3,Axisnum);
			break;
		default:
			return  ERR_AUX_PARAERR;			
			break;
	}
	//???????????????
	//return ZAux_DirectCommand(handle, cmdbuff, NULL, 0);
	return ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
}

/*************************************************************
Description:    //????????????????
Input:          //??????handle 
Output:         //Max_VirtuAxises	 ???????????
Output:         //Max_motor			 ?????????
Output:         //Max_io			 ???IN,OUT,AD,DA????				
Return:         //??????
*************************************************************/
int32  ZAux_GetSysSpecification(ZMC_HANDLE  handle, uint16 * Max_VirtuAxises,uint8 * Max_motor,uint8 *Max_io)
{
	int32 iresult;
	struct_SysMaxSpecification specification;

	if(Max_VirtuAxises == NULL || Max_motor == NULL || Max_io == NULL)
	{
		return  ERR_AUX_PARAERR;
	}

	iresult = ZMC_GetSysSpecification(handle,&specification);
	if(ERR_OK != iresult)
	{
		return iresult;
	}
	*Max_motor = specification.m_MaxAxises;
	*Max_VirtuAxises= specification.m_MaxVirtuAxises;
	*Max_io =  specification.m_MaxInController;
	*(Max_io + 1) =  specification.m_MaxOutController;
	*(Max_io + 2) =  specification.m_MaxAdController;
	*(Max_io + 3) =  specification.m_MaxDaController;

	return ERR_OK;
}

/*************************************************************
Description:    //????????????
Input:          //??????	handle 
Input:         //???????    pcallback		
		   PZMCAutoUpCallBack???????
				Input:          //??????handle
				itypecode: ?????????
				idatalength: ???????
				pdata: ???????
Return:         //??????
*************************************************************/
int32  ZAux_SetAutoUpCallBack(ZMC_HANDLE handle, PZMCAutoUpCallBack pcallback)
{
	return ZMC_SetAutoUpCallBack(handle,pcallback);
}


/*************************************************************
Description:    //IO??? ??????????
Input:          //??????handle
Input:          //IO????????  iofirst
Input:          //IO????????  ioend
Input:          //???????    istate????????????UINT???32?????????
Output:         //??
Return:         //??????
*************************************************************/
int32  ZAux_Direct_SetOutMulti(ZMC_HANDLE handle, uint16 iofirst,uint16 ioend, uint32 * istate)
{
	int32 iresult;
	if(NULL == istate || iofirst > ioend)
	{
		return  ERR_AUX_PARAERR;
	}

	int32 icur,startio,iend;		//??????32??
	startio = iofirst;
	icur=0;
	while(1)
	{
		iend = startio + 31;
		if(iend > ioend)
		{
			iend = ioend;
		}
		iresult = ZMC_SetOutAll(handle, startio,iend, *(istate + icur));
		if(iresult != ERR_OK)
		{
			return  iresult;
		}
		startio = iend + 1;		
		icur ++;
		if(iend == ioend)			//???????
		{
			break;
		}
	}
	return ERR_OK;
}


/*************************************************************
Description:    //IO??? ??????????
Input:          //??????handle
Input:          //IO????????  iofirst
Input:          //IO????????  ioend
Input:          //???????    istate????????????UINT???32?????????
Output:         //??
Return:         //??????
*************************************************************/
int32  ZAux_Direct_GetOutMulti(ZMC_HANDLE handle, uint16 iofirst,uint16 ioend, uint32 * istate)
{
	int32 iresult;
	if(NULL == istate || iofirst > ioend)
	{
		return  ERR_AUX_PARAERR;
	}

	int32 icur,startio,iend;		//??????32??
	startio = iofirst;
	icur=0;
	while(1)
	{
		iend = startio + 31;
		if(iend > ioend)
		{
			iend = ioend;
		}
		iresult = ZMC_GetOutAll(handle, startio,iend, &istate[icur]);
		if(iresult != ERR_OK)
		{
			return  iresult;
		}
		startio = iend + 1;		
		icur ++;
		if(iend == ioend)			//???????
		{
			break;
		}
	}
	return ERR_OK;
}


/*************************************************************
Description:    //??????????????G 
Input:          //??????handle
				iMoveLen			?????????????
				imaxaxises			?????????????
				piAxislist			???????
				pfDisancelist		????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MultiMove(ZMC_HANDLE handle,int iMoveLen, int imaxaxises, int *piAxislist, float *pfDisancelist)
{
	int i,j;
	int32 iresult;
	char  cmdbuff[20480];
	char  tempbuff[20480];
	char  cmdbuffAck[20480];	
	if(0 > imaxaxises || imaxaxises > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//?????????????
	int iBuffLen = 0;
	iresult = ZAux_Direct_GetRemain_LineBuffer(handle,piAxislist[0],&iBuffLen);
	if(iBuffLen <= iMoveLen)
	{
		return 1002;			//????I??
	}


	//????????BASE????
	strcpy(cmdbuff, "BASE(");
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
	strcat(cmdbuff, tempbuff);
	//????
	strcat(cmdbuff, "\n");

	//???????????
	for(j=0;j<iMoveLen;j++)
	{
		strcat(cmdbuff, "MOVE(");

		for(i = 0; i< imaxaxises-1; i++)
		{
			//
			sprintf(tempbuff, "%f,",pfDisancelist[i +j*imaxaxises]);
			strcat(cmdbuff, tempbuff);
		}

		//
		sprintf(tempbuff, "%f)\n",pfDisancelist[i + j*imaxaxises]);
		strcat(cmdbuff, tempbuff);
	}

	int ilen = strlen(cmdbuff);				//?????????
	if(ilen > 1000)
	{
		return  20002;
	}
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);

}



/*************************************************************
Description:    //??????????????G 
Input:          //??????handle
				iMoveLen			?????????????
				imaxaxises			?????????????
				piAxislist			???????
				pfDisancelist		????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_MultiMoveAbs(ZMC_HANDLE handle,int iMoveLen, int imaxaxises, int *piAxislist, float *pfDisancelist)
{
	int i,j;
	int32 iresult;
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];	
	if(0 > imaxaxises || imaxaxises > MAX_AXIS_AUX)
	{
		return  ERR_AUX_PARAERR;
	}

	//?????????????
	int iBuffLen = 0;
	iresult = ZAux_Direct_GetRemain_LineBuffer(handle,piAxislist[0],&iBuffLen);
	if(iBuffLen <= iMoveLen)
	{
		return 1002;			//????I??
	}


	//????????BASE????
	strcpy(cmdbuff, "BASE(");
	for(i = 0; i< imaxaxises-1; i++)
	{
		//
		sprintf(tempbuff, "%d,",piAxislist[i]);
		strcat(cmdbuff, tempbuff);
	}
	sprintf(tempbuff, "%d)",piAxislist[imaxaxises-1]);
	strcat(cmdbuff, tempbuff);
	//????
	strcat(cmdbuff, "\n");

	//???????????
	for(j=0;j<iMoveLen;j++)
	{
		strcat(cmdbuff, "MOVEABS(");

		for(i = 0; i< imaxaxises-1; i++)
		{
			//
			sprintf(tempbuff, "%f,",pfDisancelist[i +j*imaxaxises]);
			strcat(cmdbuff, tempbuff);
		}

		//
		sprintf(tempbuff, "%f)\n",pfDisancelist[i + j*imaxaxises]);
		strcat(cmdbuff, tempbuff);
	}


	int ilen = strlen(cmdbuff);				//?????????
	if(ilen > 1000)
	{
		return  20002;
	}
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
}

/*************************************************************
Description:    //??????????????
Input:          //??????handle
				iaxis					??? ?????/??????
				pfRotatePara			??????????
Output:         //
Return:         //??????
*************************************************************/
int32  ZAux_Direct_FrameRotate(ZMC_HANDLE handle,int iaxis, float *pfRotatePara)
{
	int i;	
	char  cmdbuff[2048];
	char  tempbuff[2048];
	char  cmdbuffAck[2048];
    //????????
	sprintf(cmdbuff, "BASE(%d)\n",iaxis);
			
    //????????
	sprintf(tempbuff, "FRAME_ROTATE(%f,%f,%f,%f,%f,%f)", pfRotatePara[0],pfRotatePara[1],pfRotatePara[2],pfRotatePara[3],pfRotatePara[4], pfRotatePara[5]);
    strcat(cmdbuff, tempbuff);	
	//???????????????
	return ZAux_DirectCommand(handle, cmdbuff, cmdbuffAck, 2048);
	//return ZAux_Execute(handle, cmdbuff, cmdbuffAck,2048);
}

/*************************************************************
Description:    //???CAN?????????
Input:          //??????handle 
Output:         //CanNum			 ????????CAN???????
Output:         //CanId_List		 ????????CAN???ID????
Output:         //CanIn_List		 ????????????
Output:         //CanOut_List		 ????????????
Output:         //CanAin_List		 ???AD????	
Output:         //CanAOut_List		 ???DA????	
Output:         //CanAxis_List		 ?????????				
Return:         //??????
*************************************************************/
int32  ZAux_GetCanInfo(ZMC_HANDLE  handle, uint8 * CanNum,uint16 * CanId_List,uint8 *CanIn_List,uint8 *CanOut_List,uint8 *CanAin_List,uint8 *CanAOut_List,uint8 *CanAxis_List)
{
	int32 iresult;
	uint16 Canid = 0;
	uint8 Temp_CanNum = 0;
	struct_ChildCardInfo *m_CardInfo = (struct_ChildCardInfo *)malloc(sizeof(struct_ChildCardInfo));

	iresult = ZMC_EnumChildCard(handle,-1, m_CardInfo);
	Canid = m_CardInfo->m_cardid;
	while(Canid < 128 && (ERR_OK == iresult))
	{
		*(CanId_List + Temp_CanNum) = Canid;
		*(CanIn_List + Temp_CanNum) = m_CardInfo->m_imaxin;
		*(CanOut_List + Temp_CanNum) = m_CardInfo->m_imaxout;
		*(CanAin_List + Temp_CanNum) = m_CardInfo->m_imaxad;
		*(CanAOut_List + Temp_CanNum) = m_CardInfo->m_imaxda;
		*(CanAxis_List + Temp_CanNum) = m_CardInfo->m_iAxises;

		iresult = ZMC_EnumChildCard(handle, Canid, m_CardInfo);
		Canid = m_CardInfo->m_cardid;

		Temp_CanNum ++;
	}

	*CanNum = Temp_CanNum;
	return ERR_OK;
}




